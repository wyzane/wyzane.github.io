<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Python标准库之argparse</title>
      <link href="/2019/12/29/Python%E6%A0%87%E5%87%86%E5%BA%93%E4%B9%8Bargparse/"/>
      <url>/2019/12/29/Python%E6%A0%87%E5%87%86%E5%BA%93%E4%B9%8Bargparse/</url>
      
        <content type="html"><![CDATA[<p>python中用来解析命令行的工具有两个：sys.argv 和 argparse。对于简单的命令行传参，使用 sys.argv 就可以解析了，如果需要解析复杂的命令行参数，那么就可以使用 argparse。下面介绍下 argparse 的用法。</p><p>第一个简单的例子：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 实例化参数解析器</span></span><br><span class="line">parser = argparse.ArgumentParser(description=<span class="string">"a argument parser"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加参数</span></span><br><span class="line">parser.add_argument(<span class="string">'--host'</span>,</span><br><span class="line">                    action=<span class="string">"store"</span>,</span><br><span class="line">                    default=<span class="string">'127.0.0.1'</span>)</span><br><span class="line">parser.add_argument(<span class="string">'--port'</span>,</span><br><span class="line">                    action=<span class="string">"store"</span>, type=int,</span><br><span class="line">                    default=<span class="number">8000</span>)</span><br><span class="line"></span><br><span class="line">print(parser.parse_args())</span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">在命令行执行：</span></span><br><span class="line"><span class="string">python 01_test.py --host 192.168.0.102 --port 8001</span></span><br><span class="line"><span class="string">输出结果：</span></span><br><span class="line"><span class="string">Namespace(host='192.168.0.102', port=8001)</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure><p>上述步骤中，首先使用 parser = argparse.ArgumentParser() 实例化参数解析器，然后使用 parser.add_argument() 添加需要解析的参数信息，最后使用 parser.parse_args() 获取命令行的参数信息。</p><h3 id="add-argument"><a href="#add-argument" class="headerlink" title="add_argument()"></a>add_argument()</h3><p>parser.add_argument() 函数用来添加需要解析的参数信息，它的入参有下面一些：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">参数1：命令行中参数的名称</span><br><span class="line">action：传参时需要执行的功能，有以下几个：</span><br><span class="line">store：保存值，并转换为指定类型。默认行为</span><br><span class="line">store_const：定义参数时就设置默认值，但是参数不能是 Boolean 类型</span><br><span class="line">store_true/store_false：与 store_const 类似，保存 Boolean 类型的值</span><br><span class="line">append：向list中添加数据</span><br><span class="line">append_const：向list中添加常量值</span><br><span class="line">type：指定参数值的类型，默认类型str。当传入的参数不能被转换为指定类型时，会抛出异常。</span><br><span class="line">default：参数的默认值</span><br><span class="line">dest：访问参数时，参数的别名</span><br></pre></td></tr></table></figure><p>在 add_argument()  中，还可以为命令行参数指定简短的参数名，像下面这样：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">parser.add_argument(<span class="string">'--host'</span>,</span><br><span class="line">                    <span class="string">'-ho'</span>,</span><br><span class="line">                    dest=<span class="string">'h'</span>,</span><br><span class="line">                    action=<span class="string">"store"</span>,</span><br><span class="line">                    default=<span class="string">'127.0.0.1'</span>)</span><br><span class="line">parser.add_argument(<span class="string">'--port'</span>,</span><br><span class="line">                    <span class="string">'-po'</span>,</span><br><span class="line">                    dest=<span class="string">'p'</span>,</span><br><span class="line">                    action=<span class="string">"store"</span>, type=int,</span><br><span class="line">                    default=<span class="number">8000</span>)</span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">命令行上传输参数时，有下面两种方式：</span></span><br><span class="line"><span class="string">1）python 01_test.py --host 192.168.0.102 --port 8002</span></span><br><span class="line"><span class="string">2）python 01_test.py -ho 192.168.0.102 -po 8002</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure><h3 id="parse-args"><a href="#parse-args" class="headerlink" title="parse_args()"></a>parse_args()</h3><p>函数 parser.parse_args() 用来获取命令行的参数信息，它的返回值的是一个 <code>Namespace</code>  对象，该对象的属性名就是传入的参数名，属性值是对应传入参数的值。如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">parser_args = parser.parse_args()</span><br><span class="line">print(parser_args)  <span class="comment"># Namespace(host='192.168.0.102', port=8001)</span></span><br><span class="line">print(parser_args.host)  <span class="comment"># 192.168.0.102</span></span><br></pre></td></tr></table></figure><p>当在 add_argument() 函数中指定dest参数时，可以用过 dest 指定的参数访问属性值，像下面这样：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 实例化参数解析器</span></span><br><span class="line">parser = argparse.ArgumentParser(description=<span class="string">"a argument parser"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加参数</span></span><br><span class="line">parser.add_argument(<span class="string">'--host'</span>,</span><br><span class="line">                    dest=<span class="string">'h'</span>,</span><br><span class="line">                    action=<span class="string">"store"</span>,</span><br><span class="line">                    default=<span class="string">'127.0.0.1'</span>)</span><br><span class="line">parser.add_argument(<span class="string">'--port'</span>,</span><br><span class="line">                    dest=<span class="string">'p'</span>,</span><br><span class="line">                    action=<span class="string">"store"</span>, type=int,</span><br><span class="line">                    default=<span class="number">8000</span>)</span><br><span class="line"></span><br><span class="line">parser_args = parser.parse_args()</span><br><span class="line">print(parser_args)  <span class="comment"># Namespace(h='192.168.0.102', p=8001)</span></span><br><span class="line">print(parser_args.h)  <span class="comment"># 192.168.0.102</span></span><br><span class="line">print((parser_args.p))  <span class="comment"># 8001</span></span><br></pre></td></tr></table></figure><h3 id="action参数"><a href="#action参数" class="headerlink" title="action参数"></a>action参数</h3><p>上面例子中，action 参数的值都是 “store”，下面介绍下其它参数值的使用。</p><h4 id="action-const"><a href="#action-const" class="headerlink" title="action_const"></a>action_const</h4><p>action_const表示传入指定参数名时，参数值是常量，不会改变。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">parser = argparse.ArgumentParser()</span><br><span class="line"></span><br><span class="line">parser.add_argument(<span class="string">"-t"</span>, action=<span class="string">'store_const'</span>,</span><br><span class="line">                    dest=<span class="string">'const'</span>,</span><br><span class="line">                    const=<span class="string">"const value"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">arg_parser = parser.parse_args()</span><br><span class="line">print(arg_parser.const)</span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">执行：python test.py -t</span></span><br><span class="line"><span class="string">则 arg_parser.const 的值为 "const value"</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">此时如果执行 python test.py -t "const value" </span></span><br><span class="line"><span class="string">试图向常量中传入参数，则会抛出异常</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure><h4 id="action-true"><a href="#action-true" class="headerlink" title="action_true"></a>action_true</h4><p>action_true或者action_false，这两个值与action_const类似，只是常量是 Boolean 类型。</p><p>例子如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># @Author : WZ </span></span><br><span class="line"><span class="comment"># @Time : 2019/12/29 10:37</span></span><br><span class="line"><span class="comment"># @Intro :</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">"""action='store_const'的使用</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">parser = argparse.ArgumentParser()</span><br><span class="line"></span><br><span class="line">parser.add_argument(<span class="string">"-t"</span>, action=<span class="string">'store_true'</span>,</span><br><span class="line">                    default=<span class="literal">False</span>,</span><br><span class="line">                    dest=<span class="string">'bool1'</span>)</span><br><span class="line"></span><br><span class="line">parser.add_argument(<span class="string">"-b"</span>, action=<span class="string">'store_false'</span>,</span><br><span class="line">                    default=<span class="literal">True</span>,</span><br><span class="line">                    dest=<span class="string">'bool2'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">arg_parser = parser.parse_args()</span><br><span class="line">print(arg_parser.bool1)</span><br><span class="line">print(arg_parser.bool2)</span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">执行 python test.py -t 时，arg_parser.bool1 的值是 True</span></span><br><span class="line"><span class="string">执行 python test.py 时，arg_parser.bool1 的值是False</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">执行 python test.py -b 时，arg_parser.bool2 的值是 False</span></span><br><span class="line"><span class="string">执行 python test.py 时，arg_parser.bool2 的值是 True</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure><h4 id="append"><a href="#append" class="headerlink" title="append"></a>append</h4><p>append功能是向list中追加数据，使用例子如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">parser = argparse.ArgumentParser()</span><br><span class="line"></span><br><span class="line">parser.add_argument(<span class="string">"-a"</span>, action=<span class="string">'append'</span>,</span><br><span class="line">                    default=[],</span><br><span class="line">                    dest=<span class="string">'add'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">arg_parser = parser.parse_args()</span><br><span class="line">print(arg_parser.add)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">执行 python test.py，输出为 []</span></span><br><span class="line"><span class="string">执行 python test.py -a one -a two -a second，输出为 ['one', 'two', 'second']</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure><h4 id="append-const"><a href="#append-const" class="headerlink" title="append_const"></a>append_const</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">parser = argparse.ArgumentParser()</span><br><span class="line"></span><br><span class="line">parser.add_argument(<span class="string">"-a"</span>, action=<span class="string">'append_const'</span>,</span><br><span class="line">                    const=<span class="string">"const1"</span>,</span><br><span class="line">                    default=[],</span><br><span class="line">                    dest=<span class="string">'add'</span>)</span><br><span class="line">parser.add_argument(<span class="string">"-b"</span>, action=<span class="string">'append_const'</span>,</span><br><span class="line">                    const=<span class="string">"const2"</span>,</span><br><span class="line">                    default=[],</span><br><span class="line">                    dest=<span class="string">'add'</span>)</span><br><span class="line"></span><br><span class="line">arg_parser = parser.parse_args()</span><br><span class="line">print(arg_parser.add)</span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">执行 python test.py，输出为 []</span></span><br><span class="line"><span class="string">执行 python test.py -a，输出为 ['const1']</span></span><br><span class="line"><span class="string">执行 python test.py -b，输出为 ['const2']</span></span><br><span class="line"><span class="string">执行 python test.py -a -b，输出为 ['const1', 'const2']</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure><h3 id="修改前缀"><a href="#修改前缀" class="headerlink" title="修改前缀"></a>修改前缀</h3><p>命令行参数默认前缀是 “-“，也可以使用 prefix_chars 指定其他前缀。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 实例化参数解析器</span></span><br><span class="line">parser = argparse.ArgumentParser(</span><br><span class="line">    description=<span class="string">"a argument parser"</span>,</span><br><span class="line">    prefix_chars=<span class="string">'-+/'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加参数</span></span><br><span class="line">parser.add_argument(<span class="string">'+host'</span>,</span><br><span class="line">                    dest=<span class="string">'h'</span>,</span><br><span class="line">                    action=<span class="string">"store"</span>,</span><br><span class="line">                    default=<span class="string">'127.0.0.1'</span>)</span><br><span class="line"></span><br><span class="line">parser_args = parser.parse_args()</span><br><span class="line">print(parser_args.h)</span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">使用 prefix_chars 参数可以同时指定多个前缀</span></span><br><span class="line"><span class="string">传参时，可以执行 python test.py +host 192.168.0.102</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure><p>此外，默认可以使用 -h 参数显式脚本支持的命令行参数信息。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 实例化参数解析器</span></span><br><span class="line">parser = argparse.ArgumentParser(</span><br><span class="line">    description=<span class="string">"a argument parser"</span>,</span><br><span class="line">    prefix_chars=<span class="string">'-+/'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加参数</span></span><br><span class="line">parser.add_argument(<span class="string">'-host'</span>,</span><br><span class="line">                    dest=<span class="string">'h'</span>,</span><br><span class="line">                    action=<span class="string">"store"</span>,</span><br><span class="line">                    default=<span class="string">'127.0.0.1'</span>,</span><br><span class="line">                    help=<span class="string">"server host"</span>)</span><br><span class="line"></span><br><span class="line">parser.add_argument(<span class="string">'-port'</span>,</span><br><span class="line">                    dest=<span class="string">'p'</span>,</span><br><span class="line">                    action=<span class="string">"store"</span>,</span><br><span class="line">                    default=<span class="number">8001</span>,</span><br><span class="line">                    help=<span class="string">"server port"</span>)</span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">执行 python test.py -h</span></span><br><span class="line"><span class="string">会在终端输出以下信息：</span></span><br><span class="line"><span class="string">usage: 01_test.py [-h] [-host H] [-port P]</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">a argument parser</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">optional arguments:</span></span><br><span class="line"><span class="string">  -h, --help  show this help message and exit</span></span><br><span class="line"><span class="string">  -host H     server host</span></span><br><span class="line"><span class="string">  -port P     server port</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure><p>以上就是 argparse 的简单用法。</p>]]></content>
      
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python中jieba的使用</title>
      <link href="/2019/12/29/Python%E4%B8%ADjieba%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
      <url>/2019/12/29/Python%E4%B8%ADjieba%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="jieba的使用"><a href="#jieba的使用" class="headerlink" title="jieba的使用"></a>jieba的使用</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">方式1：</span><br><span class="line">pip install jieba</span><br><span class="line"></span><br><span class="line">方式2：</span><br><span class="line">先下载 http://pypi.python.org/pypi/jieba/</span><br><span class="line">然后解压，运行 python setup.py install</span><br></pre></td></tr></table></figure><h3 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h3><p>下面介绍下jieba的主要功能，具体信息可参考github文档：<a href="https://github.com/fxsjy/jieba" target="_blank" rel="noopener">https://github.com/fxsjy/jieba</a></p><h4 id="分词"><a href="#分词" class="headerlink" title="分词"></a>分词</h4><p>jieba常用的三种模式：</p><ol><li>精确模式，试图将句子最精确地切开，适合文本分析；</li><li>全模式，把句子中所有的可以成词的词语都扫描出来, 速度非常快，但是不能解决歧义；</li><li>搜索引擎模式，在精确模式的基础上，对长词再次切分，提高召回率，适合用于搜索引擎分词。</li></ol><p>可使用 <code>jieba.cut</code> 和 <code>jieba.cut_for_search</code> 方法进行分词，两者所返回的结构都是一个可迭代的 generator，可使用 for 循环来获得分词后得到的每一个词语（unicode），或者直接使用 <code>jieba.lcut</code> 以及 <code>jieba.lcut_for_search</code> 返回 list。</p><p><code>jieba.Tokenizer(dictionary=DEFAULT_DICT)</code> ：使用该方法可以自定义分词器，可以同时使用不同的词典。<code>jieba.dt</code> 为默认分词器，所有全局分词相关函数都是该分词器的映射。</p><p> <code>jieba.cut</code> 和 <code>jieba.lcut</code> 可接受的参数如下：</p><ol><li>需要分词的字符串（unicode 或 UTF-8 字符串、GBK 字符串）</li><li>cut_all：是否使用全模式，默认值为 <code>False</code></li><li>HMM：用来控制是否使用 HMM 模型，默认值为 <code>True</code></li></ol><p><code>jieba.cut_for_search</code> 和 <code>jieba.lcut_for_search</code> 接受 2 个参数：</p><ol><li>需要分词的字符串（unicode 或 UTF-8 字符串、GBK 字符串）</li><li>HMM：用来控制是否使用 HMM 模型，默认值为 <code>True</code></li></ol><p>需要注意的是，尽量不要使用 GBK 字符串，可能无法预料地错误解码成 UTF-8。</p><p>三种分词模式的比较：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 全匹配</span></span><br><span class="line">seg_list = jieba.cut(<span class="string">"今天哪里都没去，在家里睡了一天"</span>, cut_all=<span class="literal">True</span>)</span><br><span class="line">print(list(seg_list))  <span class="comment"># ['今天', '哪里', '都', '没去', '', '', '在家', '家里', '睡', '了', '一天']</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 精确匹配 默认模式</span></span><br><span class="line">seg_list = jieba.cut(<span class="string">"今天哪里都没去，在家里睡了一天"</span>, cut_all=<span class="literal">False</span>)</span><br><span class="line">print(list(seg_list))  <span class="comment"># ['今天', '哪里', '都', '没', '去', '，', '在', '家里', '睡', '了', '一天']</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 精确匹配</span></span><br><span class="line">seg_list = jieba.cut_for_search(<span class="string">"今天哪里都没去，在家里睡了一天"</span>)</span><br><span class="line">print(list(seg_list))  <span class="comment"># ['今天', '哪里', '都', '没', '去', '，', '在', '家里', '睡', '了', '一天']</span></span><br></pre></td></tr></table></figure><h4 id="自定义词典"><a href="#自定义词典" class="headerlink" title="自定义词典"></a>自定义词典</h4><p>开发者可以指定自己自定义的词典，以便包含 jieba 词库里没有的词。<br>用法： jieba.load_userdict(dict_path)  </p><p>dict_path：为自定义词典文件的路径</p><p>词典格式如下：</p><p>一个词占一行；每一行分三部分：词语、词频（可省略）、词性（可省略），用空格隔开，顺序不可颠倒。</p><p>下面使用一个例子说明一下：</p><p>自定义字典 user_dict.txt：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">大学课程</span><br><span class="line">深度学习</span><br></pre></td></tr></table></figure><p>下面比较下精确匹配、全匹配和使用自定义词典的区别：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> jieba</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">test_sent = <span class="string">"""</span></span><br><span class="line"><span class="string">数学是一门基础性的大学课程，深度学习是基于数学的，尤其是线性代数课程</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line">words = jieba.cut(test_sent)</span><br><span class="line">print(list(words))</span><br><span class="line"><span class="comment"># ['\n', '数学', '是', '一门', '基础性', '的', '大学', '课程', '，', '深度',</span></span><br><span class="line"><span class="comment"># '学习', '是', '基于', '数学', '的', '，', '尤其', '是', '线性代数', '课程', '\n']</span></span><br><span class="line"></span><br><span class="line">words = jieba.cut(test_sent, cut_all=<span class="literal">True</span>)</span><br><span class="line">print(list(words))</span><br><span class="line"><span class="comment"># ['\n', '数学', '是', '一门', '基础', '基础性', '的', '大学', '课程', '', '', '深度',</span></span><br><span class="line"><span class="comment"># '学习', '是', '基于', '数学', '的', '', '', '尤其', '是', '线性', '线性代数', '代数', '课程', '\n']</span></span><br><span class="line"></span><br><span class="line">jieba.load_userdict(<span class="string">"userdict.txt"</span>)</span><br><span class="line">words = jieba.cut(test_sent)</span><br><span class="line">print(list(words))</span><br><span class="line"><span class="comment"># ['\n', '数学', '是', '一门', '基础性', '的', '大学课程', '，', '深度学习', '是',</span></span><br><span class="line"><span class="comment"># '基于', '数学', '的', '，', '尤其', '是', '线性代数', '课程', '\n']</span></span><br><span class="line"></span><br><span class="line">jieba.add_word(<span class="string">"尤其是"</span>)</span><br><span class="line">jieba.add_word(<span class="string">"线性代数课程"</span>)</span><br><span class="line"></span><br><span class="line">words = jieba.cut(test_sent)</span><br><span class="line">print(list(words))</span><br><span class="line"><span class="comment"># ['\n', '数学', '是', '一门', '基础性', '的', '大学课程', '，', '深度学习', '是',</span></span><br><span class="line"><span class="comment"># '基于', '数学', '的', '，', '尤其是', '线性代数课程', '\n']</span></span><br></pre></td></tr></table></figure><p>从上面的例子中可以看出，使用自定义词典与使用默认词典的区别。</p><p>jieba.add_word()：向自定义字典中添加词语</p><h4 id="关键词提取"><a href="#关键词提取" class="headerlink" title="关键词提取"></a>关键词提取</h4><p>可以基于 TF-IDF  算法进行关键词提取，也可以基于extRank 算法。 TF-IDF  算法与 elasticsearch 中使用的算法是一样的。</p><p>使用 jieba.analyse.extract_tags() 函数进行关键词提取，其参数如下：</p><p>jieba.analyse.extract_tags(sentence, topK=20, withWeight=False, allowPOS=())</p><ol><li>sentence 为待提取的文本</li><li>topK 为返回几个 TF/IDF 权重最大的关键词，默认值为 20</li><li>withWeight 为是否一并返回关键词权重值，默认值为 False</li><li>allowPOS 仅包括指定词性的词，默认值为空，即不筛选</li><li>jieba.analyse.TFIDF(idf_path=None) 新建 TFIDF 实例，idf_path 为 IDF 频率文件</li></ol><p>也可以使用 jieba.analyse.TFIDF(idf_path=None) 新建 TFIDF 实例，idf_path 为 IDF 频率文件。</p><p>基于 TF-IDF 算法的关键词抽取：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> jieba.analyse</span><br><span class="line"></span><br><span class="line">file = <span class="string">"sanguo.txt"</span></span><br><span class="line">topK = <span class="number">12</span></span><br><span class="line">content = open(file, <span class="string">'rb'</span>).read()</span><br><span class="line"></span><br><span class="line">tags = jieba.analyse.extract_tags(content, topK=topK)</span><br><span class="line">print(tags)</span><br><span class="line"><span class="comment"># ['玄德', '程远志', '张角', '云长', '张飞', '黄巾', '封谞', '刘焉', '邓茂', '邹靖', '姓名', '招军']</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># withWeight=True：将权重值一起返回</span></span><br><span class="line">tags = jieba.analyse.extract_tags(content, topK=topK, withWeight=<span class="literal">True</span>)</span><br><span class="line">print(tags)</span><br><span class="line"><span class="comment"># [('玄德', 0.1038549799467099), ('程远志', 0.07787459004363208), ('张角', 0.0722532891360849),</span></span><br><span class="line"><span class="comment"># ('云长', 0.07048801593691037), ('张飞', 0.060972692853113214), ('黄巾', 0.058227157790330185),</span></span><br><span class="line"><span class="comment"># ('封谞', 0.0563904127495283), ('刘焉', 0.05470798376886792), ('邓茂', 0.04917692565566038),</span></span><br><span class="line"><span class="comment"># ('邹靖', 0.04427258239705188), ('姓名', 0.04219704283997642), ('招军', 0.04182041076757075)]</span></span><br></pre></td></tr></table></figure><p>上面的代码是读取文件，提取出现频率最高的前12个词。</p><p>TF-IDF的原理如下：</p><p>词频 (term frequency, TF) 指的是某一个给定的词语在该文件中出现的次数。这个数字通常会被归一化(一般是词频除以文章总词数)。<br>$$<br>TF = \frac{词条W出现的次数}{所有词条的数量}<br>$$<br>逆向文件频率 (inverse document frequency, IDF) IDF的主要思想是：如果包含词条t的文档越少, IDF越大，则说明词条具有很好的类别区分能力。某一特定词语的IDF，可以由总文件数目除以包含该词语之文件的数目，再将得到的商取对数得到。<br>$$<br>IDF = \log_2\frac{语料库文档总数}{包含词条W的文档数+1}<br>$$<br>关键词提取所使用逆向文件频率（IDF）文本语料库，当提取的结果不是我们想要的结果时，我们可以自定义IDF文本语料库。</p><h4 id="词性标注"><a href="#词性标注" class="headerlink" title="词性标注"></a>词性标注</h4><p>词性标注主要是标记文本分词后每个词的词性，使用例子如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> jieba</span><br><span class="line"><span class="keyword">import</span> jieba.posseg <span class="keyword">as</span> pseg</span><br><span class="line"></span><br><span class="line"><span class="comment"># 默认模式</span></span><br><span class="line">seg_list = pseg.cut(<span class="string">"今天哪里都没去，在家里睡了一天"</span>)</span><br><span class="line"><span class="keyword">for</span> word, flag <span class="keyword">in</span> seg_list:</span><br><span class="line">    print(word + <span class="string">" "</span> + flag)</span><br><span class="line">   </span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">使用 jieba 默认模式的输出结果是：</span></span><br><span class="line"><span class="string">我 r</span></span><br><span class="line"><span class="string">Prefix dict has been built successfully.</span></span><br><span class="line"><span class="string">今天 t</span></span><br><span class="line"><span class="string">吃 v</span></span><br><span class="line"><span class="string">早饭 n</span></span><br><span class="line"><span class="string">了 ul</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># paddle 模式</span></span><br><span class="line">words = pseg.cut(<span class="string">"我今天吃早饭了"</span>,use_paddle=<span class="literal">True</span>)</span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">使用 paddle 模式的输出结果是：</span></span><br><span class="line"><span class="string">我 r</span></span><br><span class="line"><span class="string">今天 TIME</span></span><br><span class="line"><span class="string">吃 v</span></span><br><span class="line"><span class="string">早饭 n</span></span><br><span class="line"><span class="string">了 xc</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure><p>paddle模式的词性对照表如下：</p><table><thead><tr><th>标签</th><th>含义</th><th>标签</th><th>含义</th><th>标签</th><th>含义</th><th>标签</th><th>含义</th></tr></thead><tbody><tr><td>n</td><td>普通名词</td><td>f</td><td>方位名词</td><td>s</td><td>处所名词</td><td>t</td><td>时间</td></tr><tr><td>nr</td><td>人名</td><td>ns</td><td>地名</td><td>nt</td><td>机构名</td><td>nw</td><td>作品名</td></tr><tr><td>nz</td><td>其他专名</td><td>v</td><td>普通动词</td><td>vd</td><td>动副词</td><td>vn</td><td>名动词</td></tr><tr><td>a</td><td>形容词</td><td>ad</td><td>副形词</td><td>an</td><td>名形词</td><td>d</td><td>副词</td></tr><tr><td>m</td><td>数量词</td><td>q</td><td>量词</td><td>r</td><td>代词</td><td>p</td><td>介词</td></tr><tr><td>c</td><td>连词</td><td>u</td><td>助词</td><td>xc</td><td>其他虚词</td><td>w</td><td>标点符号</td></tr><tr><td>PER</td><td>人名</td><td>LOC</td><td>地名</td><td>ORG</td><td>机构名</td><td>TIME</td><td>时间</td></tr></tbody></table><h4 id="获取词语位置"><a href="#获取词语位置" class="headerlink" title="获取词语位置"></a>获取词语位置</h4><p>将分本分词后，返回每个词和该词在原文中的起始位置，例子如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> jieba</span><br><span class="line"></span><br><span class="line">result = jieba.tokenize(<span class="string">'今天哪里都没去，在家里睡了一天'</span>)</span><br><span class="line"><span class="keyword">for</span> tk <span class="keyword">in</span> result:</span><br><span class="line">    print(<span class="string">"word:"</span> + tk[<span class="number">0</span>] +</span><br><span class="line">          <span class="string">" start:"</span> + str(tk[<span class="number">1</span>]) +</span><br><span class="line">          <span class="string">" end:"</span> + str(tk[<span class="number">2</span>]))</span><br><span class="line">    </span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">word:华为技术有限公司 start:0 end:8</span></span><br><span class="line"><span class="string">word:的 start:8 end:9</span></span><br><span class="line"><span class="string">word:手机 start:9 end:11</span></span><br><span class="line"><span class="string">word:品牌 start:11 end:13</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用 search 模式</span></span><br><span class="line">result = jieba.tokenize(<span class="string">'华为技术有限公司的手机品牌'</span>, mode=<span class="string">"search"</span>)</span><br><span class="line"><span class="keyword">for</span> tk <span class="keyword">in</span> result:</span><br><span class="line">    print(<span class="string">"word:"</span> + tk[<span class="number">0</span>] +</span><br><span class="line">          <span class="string">" start:"</span> + str(tk[<span class="number">1</span>]) +</span><br><span class="line">          <span class="string">" end:"</span> + str(tk[<span class="number">2</span>]))</span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">输出：</span></span><br><span class="line"><span class="string">word:华为 start:0 end:2</span></span><br><span class="line"><span class="string">word:技术 start:2 end:4</span></span><br><span class="line"><span class="string">word:有限 start:4 end:6</span></span><br><span class="line"><span class="string">word:公司 start:6 end:8</span></span><br><span class="line"><span class="string">word:华为技术有限公司 start:0 end:8</span></span><br><span class="line"><span class="string">word:的 start:8 end:9</span></span><br><span class="line"><span class="string">word:手机 start:9 end:11</span></span><br><span class="line"><span class="string">word:品牌 start:11 end:13</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure><h4 id="收索引擎"><a href="#收索引擎" class="headerlink" title="收索引擎"></a>收索引擎</h4><p>使用 jieba 和 whoosh 可以实现搜索引擎功能。</p><p>whoosh 是由python实现的一款全文搜索工具包，可以使用 pip 安装它：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install whoosh</span><br></pre></td></tr></table></figure><p>介绍 jieba + whoosh 实现搜索之前，你可以先看下文 whoosh 的简单介绍。</p><p>下面看一个简单的搜索引擎的例子：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> shutil</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> whoosh.fields <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> whoosh.index <span class="keyword">import</span> create_in</span><br><span class="line"><span class="keyword">from</span> whoosh.qparser <span class="keyword">import</span> QueryParser</span><br><span class="line"><span class="keyword">from</span> jieba.analyse <span class="keyword">import</span> ChineseAnalyzer</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">analyzer = ChineseAnalyzer()</span><br><span class="line"></span><br><span class="line">schema = Schema(title=TEXT(stored=<span class="literal">True</span>),</span><br><span class="line">                path=ID(stored=<span class="literal">True</span>),</span><br><span class="line">                content=TEXT(stored=<span class="literal">True</span>,</span><br><span class="line">                             analyzer=analyzer))</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(<span class="string">"test"</span>):</span><br><span class="line">    os.mkdir(<span class="string">"test"</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="comment"># 递归删除目录</span></span><br><span class="line">    shutil.rmtree(<span class="string">"test"</span>)</span><br><span class="line">    os.mkdir(<span class="string">"test"</span>)</span><br><span class="line"></span><br><span class="line">idx = create_in(<span class="string">"test"</span>, schema)</span><br><span class="line">writer = idx.writer()</span><br><span class="line"></span><br><span class="line">writer.add_document(</span><br><span class="line">    title=<span class="string">u"document1"</span>,</span><br><span class="line">    path=<span class="string">"/tmp1"</span>,</span><br><span class="line">    content=<span class="string">u"Tracy McGrady is a famous basketball player, the elegant basketball style of him attract me"</span>)</span><br><span class="line">writer.add_document(</span><br><span class="line">    title=<span class="string">u"document2"</span>,</span><br><span class="line">    path=<span class="string">"/tmp2"</span>,</span><br><span class="line">    content=<span class="string">u"Kobe Bryant is a famous basketball player too , the tenacious spirit of him also attract me"</span>)</span><br><span class="line">writer.add_document(</span><br><span class="line">    title=<span class="string">u"document3"</span>,</span><br><span class="line">    path=<span class="string">"/tmp3"</span>,</span><br><span class="line">    content=<span class="string">u"LeBron James is the player i do not like"</span>)</span><br><span class="line"></span><br><span class="line">writer.commit()</span><br><span class="line">searcher = idx.searcher()</span><br><span class="line">parser = QueryParser(<span class="string">"content"</span>, schema=idx.schema)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> keyword <span class="keyword">in</span> (<span class="string">"basketball"</span>, <span class="string">"elegant"</span>):</span><br><span class="line">    print(<span class="string">"searched keyword "</span>,keyword)</span><br><span class="line">    query= parser.parse(keyword)</span><br><span class="line">    results = searcher.search(query)</span><br><span class="line">    <span class="keyword">for</span> hit <span class="keyword">in</span> results:</span><br><span class="line">        print(hit.highlights(<span class="string">"content"</span>))</span><br><span class="line">    print(<span class="string">"="</span>*<span class="number">50</span>)</span><br></pre></td></tr></table></figure><p>上面代码中，使用 add_document() 把一个文档添加到了 index 中。在这些文档中，搜索含有 “basketball”和 “elegant” 的文档。</p><p>打印结果如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Building prefix dict from the default dictionary ...</span><br><span class="line">Loading model from cache C:\Users\wyzane\AppData\Local\Temp\jieba.cache</span><br><span class="line">Loading model cost 0.754 seconds.</span><br><span class="line">Prefix dict has been built successfully.</span><br><span class="line">searched keyword  basketball</span><br><span class="line">McGrady is a famous &lt;b class=&quot;match term0&quot;&gt;basketball&lt;/b&gt; player, the elegant...&lt;b class=&quot;match term0&quot;&gt;basketball&lt;/b&gt; style of him attract me</span><br><span class="line">Bryant is a famous &lt;b class=&quot;match term0&quot;&gt;basketball&lt;/b&gt; player too , the tenacious</span><br><span class="line">==================================================</span><br><span class="line">searched keyword  elegant</span><br><span class="line">basketball player, the &lt;b class=&quot;match term0&quot;&gt;elegant&lt;/b&gt; basketball style</span><br><span class="line">==================================================</span><br></pre></td></tr></table></figure><p>更换搜索词时：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> keyword <span class="keyword">in</span> (<span class="string">"LeBron"</span>, <span class="string">"Kobe"</span>):</span><br><span class="line">    print(<span class="string">"searched keyword "</span>,keyword)</span><br><span class="line">    query= parser.parse(keyword)</span><br><span class="line">    results = searcher.search(query)</span><br><span class="line">    <span class="keyword">for</span> hit <span class="keyword">in</span> results:</span><br><span class="line">        print(hit.highlights(<span class="string">"content"</span>))</span><br><span class="line">    print(<span class="string">"="</span>*<span class="number">50</span>)</span><br></pre></td></tr></table></figure><p>搜索结果如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Building prefix dict from the default dictionary ...</span><br><span class="line">Loading model from cache C:\Users\wyzane\AppData\Local\Temp\jieba.cache</span><br><span class="line">Loading model cost 0.801 seconds.</span><br><span class="line">Prefix dict has been built successfully.</span><br><span class="line">searched keyword  LeBron</span><br><span class="line">&lt;b class=&quot;match term0&quot;&gt;LeBron&lt;/b&gt; James is the player i do not like</span><br><span class="line">==================================================</span><br><span class="line">searched keyword  Kobe</span><br><span class="line">&lt;b class=&quot;match term0&quot;&gt;Kobe&lt;/b&gt; Bryant is a famous basketball player too , the tenacious</span><br><span class="line">==================================================</span><br></pre></td></tr></table></figure><p>上面是搜索英文，下面展示下搜索中文。</p><p>添加下面的文档数据：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">writer.add_document(</span><br><span class="line">    title=<span class="string">u"document1"</span>,</span><br><span class="line">    path=<span class="string">"/tmp1"</span>,</span><br><span class="line">    content=<span class="string">u"麦迪是一位著名的篮球运动员，他飘逸的打法深深吸引着我"</span>)</span><br><span class="line">writer.add_document(</span><br><span class="line">    title=<span class="string">u"document2"</span>,</span><br><span class="line">    path=<span class="string">"/tmp2"</span>,</span><br><span class="line">    content=<span class="string">u"科比是一位著名的篮球运动员，他坚韧的精神深深的感染着我"</span>)</span><br><span class="line">writer.add_document(</span><br><span class="line">    title=<span class="string">u"document3"</span>,</span><br><span class="line">    path=<span class="string">"/tmp3"</span>,</span><br><span class="line">    content=<span class="string">u"詹姆斯是我不喜欢的运动员"</span>)</span><br></pre></td></tr></table></figure><p>执行搜索：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> keyword <span class="keyword">in</span> (<span class="string">"篮球"</span>, <span class="string">"麦迪"</span>):</span><br><span class="line">    print(<span class="string">"searched keyword "</span>,keyword)</span><br><span class="line">    query= parser.parse(keyword)</span><br><span class="line">    results = searcher.search(query)</span><br><span class="line">    <span class="keyword">for</span> hit <span class="keyword">in</span> results:</span><br><span class="line">        print(hit.highlights(<span class="string">"content"</span>))</span><br><span class="line">    print(<span class="string">"="</span>*<span class="number">50</span>)</span><br></pre></td></tr></table></figure><p>结果如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Building prefix dict from the default dictionary ...</span><br><span class="line">Loading model from cache C:\Users\wyzane\AppData\Local\Temp\jieba.cache</span><br><span class="line">Loading model cost 0.780 seconds.</span><br><span class="line">Prefix dict has been built successfully.</span><br><span class="line">searched keyword  篮球</span><br><span class="line">麦迪是一位著名的&lt;b class=&quot;match term0&quot;&gt;篮球&lt;/b&gt;运动员，他飘逸的打法深深吸引着我</span><br><span class="line">科比是一位著名的&lt;b class=&quot;match term0&quot;&gt;篮球&lt;/b&gt;运动员，他坚韧的精神深深的感染着我</span><br><span class="line">==================================================</span><br><span class="line">searched keyword  麦迪</span><br><span class="line">&lt;b class=&quot;match term0&quot;&gt;麦迪&lt;/b&gt;是一位著名的篮球运动员，他飘逸的打法深深吸引着我</span><br><span class="line">==================================================</span><br></pre></td></tr></table></figure><p>上面就简单介绍了 jieba + whoosh 实现搜索引擎的例子。其实要实现上面的搜索功能，在 elasticsearch 中可以更加简单，有兴趣的同学可以了解一下。</p><h3 id="whoosh"><a href="#whoosh" class="headerlink" title="whoosh"></a>whoosh</h3><p>下面介绍下 whoosh 的使用。</p><p>whoosh 官方文档为：<a href="https://whoosh.readthedocs.io/en/latest/" target="_blank" rel="noopener">https://whoosh.readthedocs.io/en/latest/</a></p><p>使用 whoosh 之前，需要先定义 index 对象，同时创建 schema对象 与 index 对应。schema中包含一列字段，这些字段存放在 index 中。每个字段都是文档中的一部分信息，例如标题和文本内容。字段能被搜索或者存储。</p><p>定义一个 schema，由两个字段：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> whoosh.fields <span class="keyword">import</span> Schema, STORED, ID, KEYWORD, TEXT</span><br><span class="line"></span><br><span class="line">schema = Schema(title=TEXT(stored=<span class="literal">True</span>), content=TEXT,</span><br><span class="line">                path=ID(stored=<span class="literal">True</span>), tags=KEYWORD, </span><br><span class="line">                icon=STORED)</span><br></pre></td></tr></table></figure><p>我们仅需要创建一次 schema，当创建索引时，schema 会被序列化并与 index 保存在一起。</p><p>当创建 schema 对象时，需要指定字段名和其对应的类型，在 whoosh.fields 下，由如下类型：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">ID：该类型索引字段的整个值作为一个单位类索引，而不是拆分成多个词</span><br><span class="line">TEXT：该类型适用于文本数据的正文，它为文本建立索引并存储术语位置以允许短语搜索</span><br><span class="line">NUMERIC：数值类型，可以存储整数或者浮点数</span><br><span class="line">BOOLEAN：Boolean类型</span><br><span class="line">DATETIME：适用于 datetime 对象</span><br><span class="line">KEYWORD：适用于空格或者标点分割的关键字，类型数据能被索引和搜索但是不支持短语搜索（为了节省空间）</span><br><span class="line">STORED：与文档存储在一起而不是与索引，该类型的数据不能被索引和搜索</span><br></pre></td></tr></table></figure><p>schema对象创建完成后，可以使用 create_in 函数创建索引：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os.path</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> whoosh.index <span class="keyword">import</span> create_in</span><br><span class="line"><span class="keyword">from</span> whoosh.fields <span class="keyword">import</span> Schema, STORED, ID, KEYWORD, TEXT</span><br><span class="line"></span><br><span class="line">schema = Schema(title=TEXT(stored=<span class="literal">True</span>), content=TEXT,</span><br><span class="line">                path=ID(stored=<span class="literal">True</span>), tags=KEYWORD, </span><br><span class="line">                icon=STORED)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(<span class="string">"index"</span>):</span><br><span class="line">    os.mkdir(<span class="string">"index"</span>)</span><br><span class="line">ix = create_in(<span class="string">"index"</span>, schema)</span><br></pre></td></tr></table></figure><p>创建 index 时，会创建一个存储对象来保存 index 信息。</p><p>通常，存储对象都会是 FileStorage，一种使用文件来存储索引的存储介质。</p><p>创建索引后，也可以通过 open_dir() 来打开索引</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">from whoosh.index import open_dir</span><br><span class="line"></span><br><span class="line">ix = open_dir(&quot;index&quot;)</span><br></pre></td></tr></table></figure><p>创建好 index 对象后，我们可以往里面添加文档。writer() 方法会返回一个 IndexWriter 对象，使用它可以向 index 中添加文档：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">writer = ix.writer()</span><br><span class="line">writer.add_document(title=<span class="string">u"My document"</span>, content=<span class="string">u"This is my document!"</span>,</span><br><span class="line">                    path=<span class="string">u"/a"</span>, tags=<span class="string">u"first short"</span>, icon=<span class="string">u"/icons/star.png"</span>)</span><br><span class="line">writer.add_document(title=<span class="string">u"Second try"</span>, content=<span class="string">u"This is the second example."</span>,</span><br><span class="line">                    path=<span class="string">u"/b"</span>, tags=<span class="string">u"second short"</span>, icon=<span class="string">u"/icons/sheep.png"</span>)</span><br><span class="line">writer.add_document(title=<span class="string">u"Third time's the charm"</span>, content=<span class="string">u"Examples are many."</span>,</span><br><span class="line">                    path=<span class="string">u"/c"</span>, tags=<span class="string">u"short"</span>, icon=<span class="string">u"/icons/book.png"</span>)</span><br><span class="line">writer.commit()  <span class="comment"># 保存文档到索引中</span></span><br></pre></td></tr></table></figure><p>添加文档时，没有必要对所有字段都添加值；能被索引的 TEXT 字段必须要传入一个 unicode 类型的值，仅仅被存储而不用来索引的字段可以传入任何可被序列化的对象。</p><p>文档存储到 index 后，就可以进行索引了，索引之前首先要创建一个 search 对象：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">searcher = ix.searcher()</span><br></pre></td></tr></table></figure><p>可以使用 with 语句，以便使 search 对象自动关闭，也可以使用 try … finally：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> ix.searcher() <span class="keyword">as</span> searcher:</span><br><span class="line">    ...</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    searcher = ix.searcher()</span><br><span class="line">    ...</span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">    searcher.close()</span><br></pre></td></tr></table></figure><p>search 对象的 search() 方法需要传入一个 Query 对象。可以直接钩爪一个 Query 对象，也可以使用QueryParse构造一个 Query 对象。将 Query 对象传入 search() 方法中，可以得到一个 Results 对象。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> whoosh.query <span class="keyword">import</span> *</span><br><span class="line">myquery = And([Term(<span class="string">"content"</span>, <span class="string">u"apple"</span>), Term(<span class="string">"content"</span>, <span class="string">"bear"</span>)])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 或者使用</span></span><br><span class="line"><span class="keyword">from</span> whoosh.qparser <span class="keyword">import</span> QueryParser</span><br><span class="line">parser = QueryParser(<span class="string">"content"</span>, ix.schema)</span><br><span class="line">myquery = parser.parse(querystring)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">results = searcher.search(myquery)</span><br></pre></td></tr></table></figure><p>以上就是 whoosh 做搜索的基本步骤。</p>]]></content>
      
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python3中如何使用Fabric</title>
      <link href="/2019/12/22/Python3%E4%B8%AD%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8Fabric/"/>
      <url>/2019/12/22/Python3%E4%B8%AD%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8Fabric/</url>
      
        <content type="html"><![CDATA[<h2 id="Fabric的使用"><a href="#Fabric的使用" class="headerlink" title="Fabric的使用"></a>Fabric的使用</h2><p>Fabric是基于Python实现的SSH命令行工具，简化了SSH的应用程序部署及系统管理任务，它提供了系统基础的操作组件，可以实现本地或远程shell命令，包括：命令执行、文件上传、下载及完整执行日志输出等功能。Fabric在Paramiko的基础上做了更高一层的封装，操作起来会更加简单。</p><p>Fabric中，fabric和fabric2是官方版本，fabric3是从fabric中fork出来的非官方版本。</p><p>今天介绍下 python3 中 Fabric 的使用，即 fabric3 的使用。</p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install fabric3</span><br></pre></td></tr></table></figure><h3 id="初次使用"><a href="#初次使用" class="headerlink" title="初次使用"></a>初次使用</h3><p>使用 fabric3 时，先创建一个 fabric 文件（文件名为 fabfile.py 或者其他名称）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># fabfile.py:</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">"hello fabric"</span>)</span><br></pre></td></tr></table></figure><p>然后再执行 fab hello，结果如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hello fabric</span><br><span class="line"></span><br><span class="line">Done.</span><br></pre></td></tr></table></figure><p>执行fab命令时，若文件名是 fabfile.py，则可以不用指定。文件名不是 fabfile.py 时，需要使用 -f 指定文件名。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># test.py:</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">"hi fabric"</span>)</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello2</span><span class="params">(name)</span>:</span></span><br><span class="line">    print(<span class="string">"hello:"</span>, name)</span><br></pre></td></tr></table></figure><p>执行 fab -f test hello，结果如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hi fabric</span><br><span class="line"></span><br><span class="line">Done.</span><br></pre></td></tr></table></figure><p>执行函数时添加参数：fab -f test hello2:name=wyzane，结果如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hello: wyzane</span><br><span class="line"></span><br><span class="line">Done.</span><br></pre></td></tr></table></figure><h3 id="再次使用"><a href="#再次使用" class="headerlink" title="再次使用"></a>再次使用</h3><p>在 fabric 中，在本地执行命令可以使用 fabric.api 中的 local 方法。</p><h4 id="启动Django项目"><a href="#启动Django项目" class="headerlink" title="启动Django项目"></a>启动Django项目</h4><p>使用 fabric 启动 Django 项目。新建 Django 项目，目录结构如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">DjangoFabric</span><br><span class="line">- DjangoFabric</span><br><span class="line">- templates</span><br><span class="line">- manage.py</span><br><span class="line">- fabfile.py</span><br></pre></td></tr></table></figure><p>fabfile.py：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> fabric.api <span class="keyword">import</span> local</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">startup</span><span class="params">()</span>:</span></span><br><span class="line">    local(<span class="string">"python manage.py runserver"</span>)</span><br></pre></td></tr></table></figure><p>执行 fab startup，会启动 Django 项目。</p><h4 id="执行Git命令"><a href="#执行Git命令" class="headerlink" title="执行Git命令"></a>执行Git命令</h4><p>在 git 仓库下，创建 fabfile.py 文件，文件内容如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> fabric.api <span class="keyword">import</span> local</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">git_pull</span><span class="params">()</span>:</span></span><br><span class="line">    local(<span class="string">"git pull origin master"</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">git_push</span><span class="params">()</span>:</span></span><br><span class="line">    local(<span class="string">"git add . &amp;&amp; git commit -m 'test' &amp;&amp; git push"</span>)</span><br></pre></td></tr></table></figure><p>执行 fab git_pull 和 fab git_push 后，会进行代码的拉取和推送操作，这样看起来确实很方便。</p><h4 id="执行Linux命令"><a href="#执行Linux命令" class="headerlink" title="执行Linux命令"></a>执行Linux命令</h4><p>远程登陆到服务器，然后执行 Linux 命令</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> fabric.api <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">env.hosts = [<span class="string">'192.168.172.128'</span>]</span><br><span class="line">env.user = <span class="string">'wyzane'</span></span><br><span class="line">env.password = <span class="string">'wyzane'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">cmd</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment"># run：执行 Linux 命令</span></span><br><span class="line">    run(<span class="string">'touch /home/wyzane/tmp.txt'</span>)</span><br></pre></td></tr></table></figure><p>执行 fab cmd，就会在服务器上创建 tmp.txt 文件。</p><h4 id="上传文件"><a href="#上传文件" class="headerlink" title="上传文件"></a>上传文件</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fabric.operations.put((local_path=None, remote_path=None, use_sudo=False, mirror_local_mode=False, mode=None, use_glob=True, temp_dir=&apos;&apos;))</span><br></pre></td></tr></table></figure><p>使用上面的函数进行文件上传，或者使用 fabric.api 中的函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> fabric.operations <span class="keyword">import</span> put</span><br><span class="line"><span class="keyword">from</span> fabric.operations <span class="keyword">import</span> env</span><br><span class="line"><span class="comment"># 或者使用 from fabric.api import put, env</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">env.hosts = [<span class="string">'192.168.172.128'</span>]</span><br><span class="line">env.user = <span class="string">'wyzane'</span></span><br><span class="line">env.password = <span class="string">'wyzane'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">upload</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment"># put：上传文件到远程服务器</span></span><br><span class="line">    put(<span class="string">'mem.py'</span>, <span class="string">'/home/wyzane/'</span>)</span><br></pre></td></tr></table></figure><p>执行 fab upload，就会将文件上传到服务器。</p><h4 id="下载文件"><a href="#下载文件" class="headerlink" title="下载文件"></a>下载文件</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fabric.operations.get(remote_path, local_path=None, use_sudo=False, temp_dir=&quot;&quot;)</span><br></pre></td></tr></table></figure><p>使用上面的函数进行文件下载，可以下载单个文件，也可以下载一个文件夹。返回值是一个列表，列表中的元素是下载文件在本地的路径。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> fabric.operations <span class="keyword">import</span> get</span><br><span class="line"><span class="keyword">from</span> fabric.operations <span class="keyword">import</span> env</span><br><span class="line"><span class="comment"># 或者使用 from fabric.api import get, env</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">env.hosts = [<span class="string">'192.168.172.128'</span>]</span><br><span class="line">env.user = <span class="string">'wyzane'</span></span><br><span class="line">env.password = <span class="string">'wyzane'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">download</span><span class="params">()</span>:</span></span><br><span class="line">    results = get(<span class="string">"/home/wyzane/test"</span>)</span><br><span class="line">    print(results)</span><br><span class="line">    </span><br><span class="line"><span class="string">"""返回结果如下：</span></span><br><span class="line"><span class="string">['D:\\pyprojects\\DjangoFabric\\192.168.172.128\\test\\tmp2.txt', 'D:\\pyprojects\\DjangoFabric\\192.168.172.128\\test\\tmp1.txt']</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure><h4 id="常用API"><a href="#常用API" class="headerlink" title="常用API"></a>常用API</h4><p>下面介绍下 fabric 中的常用 API，下面的 API 可以从 fabric.operations 引入：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1. get(remote_path, local_path=None, use_sudo=False, temp_dir=&apos;&apos;)：从远程服务器上下载一个或者多个文件</span><br><span class="line">2. local(command, capture=False, shell=None)：在本地运行命令，像上面的 git 命令</span><br><span class="line">3. put(local_path=None, remote_path=None, use_sudo=False, mirror_local_mode=False, mode=None, use_glob=True, temp_dir=&apos;&apos;)：上传一个或者多个文件到远程服务器</span><br><span class="line">4. reboot(wait=120, command=&apos;reboot&apos;, use_sudo=True)：重启远程服务器</span><br><span class="line">5. run(command, shell=True, pty=True, combine_stderr=None, quiet=False, warn_only=False, stdout=None, stderr=None, timeout=None, shell_escape=None, capture_buffer_size=None)：在远程服务器上运行shell命令</span><br><span class="line">6. sudo(command, shell=True, pty=True, combine_stderr=None, user=None, quiet=False, warn_only=False, stdout=None, stderr=None, group=None, timeout=None, shell_escape=None, capture_buffer_size=None)：以超级用户权限在远程服务器上运行shell命令</span><br></pre></td></tr></table></figure><p>fabric 文档地址为：<a href="http://docs.fabfile.org/en/1.14/" target="_blank" rel="noopener">http://docs.fabfile.org/en/1.14/</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Django3.0新功能介绍</title>
      <link href="/2019/12/08/Django3-0%E6%96%B0%E5%8A%9F%E8%83%BD%E4%BB%8B%E7%BB%8D/"/>
      <url>/2019/12/08/Django3-0%E6%96%B0%E5%8A%9F%E8%83%BD%E4%BB%8B%E7%BB%8D/</url>
      
        <content type="html"><![CDATA[<p>最近，Django框架发布了3.0版本，同时为我们带来了一些新功能，其中最引人注目的一个新功能就是对异步的原生支持。</p><p>Django3.0版本发布说明：<a href="https://docs.djangoproject.com/en/3.0/releases/3.0/" target="_blank" rel="noopener">https://docs.djangoproject.com/en/3.0/releases/3.0/</a></p><p>Django3.0仅支持Python3.6及以上的版本，不再支持Python3.5及以下的Python版本。</p><p>下面，介绍下Django3.0中的新功能。</p><h3 id="支持MariaDB"><a href="#支持MariaDB" class="headerlink" title="支持MariaDB"></a>支持MariaDB</h3><p>Django官方开始支持MariaDB10.1（MariaDB数据库管理系统是MySQL的一个分支，是MySQL的开源版本）及其更高版本。</p><h3 id="支持ASGI协议"><a href="#支持ASGI协议" class="headerlink" title="支持ASGI协议"></a>支持ASGI协议</h3><p>通常我们开发Django应用时，使用WSGI协议，它是Python的Web服务器和Web应用程序或框架之间的一种简单而通用的接口。而ASGI协议是对WSGI的扩展，它在WSGI的基础上定义了实现异步通信的方式，遵循ASGI协议的Web程序可以实现异步通信。</p><p>以前我们在Django中实现异步通信,需要借助channels等第三方包。现在，Django3.0可以运行为一个ASGI应用程序，从而实现对异步的支持；即应用程序运行在ASGI协议下时，可以使用异步特性，运行在其他协议下则不能使用这个特性。</p><p>支持ASGI协议可能也会有负面影响，当你的代码中有异步非安全的的操作时（例如ORM操作），Django会阻塞代码的执行。当代码中抛出 <strong>SynchronousOnlyOperation</strong> 异常时，你应该检查异步代码并移除其中的数据库操作部分。</p><h3 id="支持PostgreSQL建立排他约束"><a href="#支持PostgreSQL建立排他约束" class="headerlink" title="支持PostgreSQL建立排他约束"></a>支持PostgreSQL建立排他约束</h3><p>ExclusionConstraint类可以在pg数据库上添加排他约束，将约束添加到Meta.constraints中，像下面这样：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Customer</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    age = models.IntegerField()</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        constraints = [</span><br><span class="line">            models.CheckConstraint(check=models.Q(age__gte=<span class="number">18</span>), name=<span class="string">'age_gte_18'</span>),</span><br><span class="line">        ]</span><br></pre></td></tr></table></figure><h3 id="field-choice支持枚举类型"><a href="#field-choice支持枚举类型" class="headerlink" title="field choice支持枚举类型"></a>field choice支持枚举类型</h3><p> <strong>TextChoices</strong>， <strong>IntegerChoices</strong>, 和 <strong>Choices</strong>等枚举类型可以用来定义<strong>Field.choise</strong>。下面是具体使用方式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># TextChoices</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span><span class="params">(models.Model)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">YearInSchool</span><span class="params">(models.TextChoices)</span>:</span></span><br><span class="line">        FRESHMAN = <span class="string">'FR'</span>, _(<span class="string">'Freshman'</span>)</span><br><span class="line">        SOPHOMORE = <span class="string">'SO'</span>, _(<span class="string">'Sophomore'</span>)</span><br><span class="line">        JUNIOR = <span class="string">'JR'</span>, _(<span class="string">'Junior'</span>)</span><br><span class="line">        SENIOR = <span class="string">'SR'</span>, _(<span class="string">'Senior'</span>)</span><br><span class="line">        GRADUATE = <span class="string">'GR'</span>, _(<span class="string">'Graduate'</span>)</span><br><span class="line"></span><br><span class="line">    year_in_school = models.CharField(</span><br><span class="line">        max_length=<span class="number">2</span>,</span><br><span class="line">        choices=YearInSchool.choices,</span><br><span class="line">        default=YearInSchool.FRESHMAN,</span><br><span class="line">    )</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># IntegerChoices</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Card</span><span class="params">(models.Model)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Suit</span><span class="params">(models.IntegerChoices)</span>:</span></span><br><span class="line">        DIAMOND = <span class="number">1</span></span><br><span class="line">        SPADE = <span class="number">2</span></span><br><span class="line">        HEART = <span class="number">3</span></span><br><span class="line">        CLUB = <span class="number">4</span></span><br><span class="line"></span><br><span class="line">    suit = models.IntegerField(choices=Suit.choices)</span><br></pre></td></tr></table></figure><p>Django3.0中主要新增主要特性就是上面这些，主要特性具体信息、新增次要特性及向后不兼容的功能（不再支持pg9.4,和oracle12.1等）可以点击上面的链接查看。</p><h3 id=""><a href="#" class="headerlink" title=""></a></h3>]]></content>
      
      
      
        <tags>
            
            <tag> django </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python标准库之contextlib</title>
      <link href="/2019/12/01/Python%E6%A0%87%E5%87%86%E5%BA%93%E4%B9%8Bcontextlib/"/>
      <url>/2019/12/01/Python%E6%A0%87%E5%87%86%E5%BA%93%E4%B9%8Bcontextlib/</url>
      
        <content type="html"><![CDATA[<p>contextlib 库提供了一些接口，使我们能更容易实现 with 语法。下面主要介绍下 contextmanager 和 suppress 的用法。</p><h2 id="with语法的实现"><a href="#with语法的实现" class="headerlink" title="with语法的实现"></a>with语法的实现</h2><p>平时我们实现读取文件的操作时，会使用 with 语法，像下面这样：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> open(<span class="string">"data.txt"</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.read()</span><br></pre></td></tr></table></figure><p>这样读取完文件后，会自动执行 f.close() 操作，关闭文件对象。</p><p>实际上，我们也可以用过实现魔法函数 __enter__() 和 __exit__() 来自定义 with 语法，像下面这样：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyOpen</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, file, flag)</span>:</span></span><br><span class="line">        self.f = open(file, flag)</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__enter__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""with ... as中as后面的内容</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">return</span> self.f</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__exit__</span><span class="params">(self, exc_type, exc_val, exc_tb)</span>:</span></span><br><span class="line">        <span class="string">"""with语句块执行完成后执行</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        self.f.close()</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    <span class="keyword">with</span> MyOpen(<span class="string">"test.txt"</span>, <span class="string">"w"</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.write(<span class="string">"hello jupyter!"</span>)</span><br></pre></td></tr></table></figure><p>其中， __enter__() 函数的返回值是 with … as 后面的对象，__exit__()函数中定义with语句块执行完成后的操作。</p><h2 id="contextmanager"><a href="#contextmanager" class="headerlink" title="contextmanager"></a>contextmanager</h2><p>contextmanager 函数是一个装饰器，可以使用它来实现 with 语法，而不用实现 __enter__() 和 __exit__() 。上文中实现 with 语法的例子可以写成下面这样：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> contextlib <span class="keyword">import</span> contextmanager</span><br><span class="line"></span><br><span class="line"><span class="meta">@contextmanager</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">MyOpen</span><span class="params">(name, state)</span>:</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        f = open(name, state)</span><br><span class="line">        <span class="keyword">yield</span> f</span><br><span class="line">    <span class="keyword">finally</span>:</span><br><span class="line">        f.close()</span><br><span class="line">      </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    <span class="keyword">with</span> MyOpen(<span class="string">"test.txt"</span>, <span class="string">"w"</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.write(<span class="string">"hello jupyter notebook!"</span>)</span><br></pre></td></tr></table></figure><p>使用 contextmanager 实现 with 语法时，被修饰的方法必须是一个生成器，生成器返回的值就作为 as 后面的值。</p><p>下面再看一个例子：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> contextlib <span class="keyword">import</span> contextmanager</span><br><span class="line"> </span><br><span class="line"><span class="meta">@contextmanager</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">example</span><span class="params">()</span>:</span></span><br><span class="line">    l = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line">    print(<span class="string">'start'</span>)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment"># raise Exception('test')</span></span><br><span class="line">        <span class="keyword">yield</span> l</span><br><span class="line">    <span class="keyword">finally</span>:</span><br><span class="line">        print(<span class="string">'end'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> example() <span class="keyword">as</span> msg:</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> msg:</span><br><span class="line">        print(i)</span><br></pre></td></tr></table></figure><p>如果在 contextmanager 修饰的函数中发生异常时，我们可以在函数中捕获该异常，像下面这样：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@contextmanager</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">example</span><span class="params">()</span>:</span></span><br><span class="line">    l = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line">    print(<span class="string">'start'</span>)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">yield</span> l</span><br><span class="line">        <span class="keyword">raise</span> Exception(<span class="string">'test'</span>)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        print(<span class="string">"exception"</span>)</span><br><span class="line">    <span class="keyword">finally</span>:</span><br><span class="line">        print(<span class="string">'end'</span>)</span><br></pre></td></tr></table></figure><p>也可以在 with 语句块之外捕获该异常：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@contextmanager</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">example</span><span class="params">()</span>:</span></span><br><span class="line">    l = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line">    print(<span class="string">'start'</span>)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">yield</span> l</span><br><span class="line">        <span class="keyword">raise</span> Exception(<span class="string">'test'</span>)</span><br><span class="line">    <span class="keyword">finally</span>:</span><br><span class="line">        print(<span class="string">'end'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">with</span> example() <span class="keyword">as</span> msg:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> msg:</span><br><span class="line">            print(i)</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p>如果异常发生在 yeild 之前，则 yield 不会返回到 with 语句中，with语句块会抛出RuntimeError异常：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@contextmanager</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">example</span><span class="params">()</span>:</span></span><br><span class="line">    l = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line">    print(<span class="string">'start'</span>)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">raise</span> Exception(<span class="string">'test'</span>)</span><br><span class="line">        <span class="keyword">yield</span> l</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        print(<span class="string">"exception"</span>)</span><br><span class="line">    <span class="keyword">finally</span>:</span><br><span class="line">        print(<span class="string">'end'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> example() <span class="keyword">as</span> msg:</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> msg:</span><br><span class="line">        print(i)</span><br></pre></td></tr></table></figure><p>上面的代码会抛出如下异常：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">raceback (most recent call last):</span><br><span class="line">  File <span class="string">"tmp.py"</span>, line <span class="number">17</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    <span class="keyword">with</span> example() <span class="keyword">as</span> msg:</span><br><span class="line">  File <span class="string">"D:\software\Python36\lib\contextlib.py"</span>, line <span class="number">83</span>, <span class="keyword">in</span> __enter__</span><br><span class="line">    <span class="keyword">raise</span> RuntimeError(<span class="string">"generator didn't yield"</span>) <span class="keyword">from</span> <span class="literal">None</span></span><br><span class="line">RuntimeError: generator didn<span class="string">'t yield</span></span><br></pre></td></tr></table></figure><p>contextmanager 的源码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">contextmanager</span><span class="params">(func)</span>:</span></span><br><span class="line">    <span class="string">"""@contextmanager decorator.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Typical usage:</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        @contextmanager</span></span><br><span class="line"><span class="string">        def some_generator(&lt;arguments&gt;):</span></span><br><span class="line"><span class="string">            &lt;setup&gt;</span></span><br><span class="line"><span class="string">            try:</span></span><br><span class="line"><span class="string">                yield &lt;value&gt;</span></span><br><span class="line"><span class="string">            finally:</span></span><br><span class="line"><span class="string">                &lt;cleanup&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    This makes this:</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        with some_generator(&lt;arguments&gt;) as &lt;variable&gt;:</span></span><br><span class="line"><span class="string">            &lt;body&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    equivalent to this:</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        &lt;setup&gt;</span></span><br><span class="line"><span class="string">        try:</span></span><br><span class="line"><span class="string">            &lt;variable&gt; = &lt;value&gt;</span></span><br><span class="line"><span class="string">            &lt;body&gt;</span></span><br><span class="line"><span class="string">        finally:</span></span><br><span class="line"><span class="string">            &lt;cleanup&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line"><span class="meta">    @wraps(func)</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">helper</span><span class="params">(*args, **kwds)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> _GeneratorContextManager(func, args, kwds)</span><br><span class="line">    <span class="keyword">return</span> helper</span><br></pre></td></tr></table></figure><p>contextmanager 会返回一个<em>GeneratorContextManager 对象。 _GeneratorContextManager 类中实现了 __enter_\</em>() 和 __exit__() 方法，如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, func, args, kwds)</span>:</span></span><br><span class="line">    self.gen = func(*args, **kwds)</span><br><span class="line">    self.func, self.args, self.kwds = func, args, kwds</span><br><span class="line">    <span class="comment"># Issue 19330: ensure context manager instances have good docstrings</span></span><br><span class="line">    doc = getattr(func, <span class="string">"__doc__"</span>, <span class="literal">None</span>)</span><br><span class="line">    <span class="keyword">if</span> doc <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        doc = type(self).__doc__</span><br><span class="line">    self.__doc__ = doc</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__enter__</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">return</span> next(self.gen)</span><br><span class="line">    <span class="keyword">except</span> StopIteration:</span><br><span class="line">        <span class="keyword">raise</span> RuntimeError(<span class="string">"generator didn't yield"</span>) <span class="keyword">from</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__exit__</span><span class="params">(self, type, value, traceback)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> type <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            next(self.gen)</span><br><span class="line">        <span class="keyword">except</span> StopIteration:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">raise</span> RuntimeError(<span class="string">"generator didn't stop"</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">if</span> value <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="comment"># Need to force instantiation so we can reliably</span></span><br><span class="line">            <span class="comment"># tell if we get the same exception back</span></span><br><span class="line">            value = type()</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            self.gen.throw(type, value, traceback)</span><br><span class="line">        <span class="keyword">except</span> StopIteration <span class="keyword">as</span> exc:</span><br><span class="line">            <span class="comment"># Suppress StopIteration *unless* it's the same exception that</span></span><br><span class="line">            <span class="comment"># was passed to throw().  This prevents a StopIteration</span></span><br><span class="line">            <span class="comment"># raised inside the "with" statement from being suppressed.</span></span><br><span class="line">            <span class="keyword">return</span> exc <span class="keyword">is</span> <span class="keyword">not</span> value</span><br><span class="line">        <span class="keyword">except</span> RuntimeError <span class="keyword">as</span> exc:</span><br><span class="line">            <span class="comment"># Don't re-raise the passed in exception. (issue27122)</span></span><br><span class="line">            <span class="keyword">if</span> exc <span class="keyword">is</span> value:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">            <span class="comment"># Likewise, avoid suppressing if a StopIteration exception</span></span><br><span class="line">            <span class="comment"># was passed to throw() and later wrapped into a RuntimeError</span></span><br><span class="line">            <span class="comment"># (see PEP 479).</span></span><br><span class="line">            <span class="keyword">if</span> type <span class="keyword">is</span> StopIteration <span class="keyword">and</span> exc.__cause__ <span class="keyword">is</span> value:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">            <span class="keyword">raise</span></span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="comment"># only re-raise if it's *not* the exception that was</span></span><br><span class="line">            <span class="comment"># passed to throw(), because __exit__() must not raise</span></span><br><span class="line">            <span class="comment"># an exception unless __exit__() itself failed.  But throw()</span></span><br><span class="line">            <span class="comment"># has to raise the exception to signal propagation, so this</span></span><br><span class="line">            <span class="comment"># fixes the impedance mismatch between the throw() protocol</span></span><br><span class="line">            <span class="comment"># and the __exit__() protocol.</span></span><br><span class="line">            <span class="comment">#</span></span><br><span class="line">            <span class="keyword">if</span> sys.exc_info()[<span class="number">1</span>] <span class="keyword">is</span> value:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">            <span class="keyword">raise</span></span><br><span class="line">        <span class="keyword">raise</span> RuntimeError(<span class="string">"generator didn't stop after throw()"</span>)</span><br></pre></td></tr></table></figure><p><em>GeneratorContextManager初始化时，会接收一个生成器函数，__enter_\</em>()方法中会返回该生成器函数的值。</p><h2 id="suppress的使用"><a href="#suppress的使用" class="headerlink" title="suppress的使用"></a>suppress的使用</h2><p>suppress会返回一个上下文管理器对象，如果with语句块中出现异常时，会忽略 suppress 中指定的异常，并且退出程序。例子如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    os.remove(<span class="string">'somefile.tmp'</span>)</span><br><span class="line"><span class="keyword">except</span> FileNotFoundError:</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    os.remove(<span class="string">'someotherfile.tmp'</span>)</span><br><span class="line"><span class="keyword">except</span> FileNotFoundError:</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line">    </span><br><span class="line"><span class="comment"># 上面的异常捕获可以写成下面这样</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> contextlib <span class="keyword">import</span> suppress</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> suppress(FileNotFoundError):</span><br><span class="line">    os.remove(<span class="string">'somefile.tmp'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> suppress(FileNotFoundError):</span><br><span class="line">    os.remove(<span class="string">'someotherfile.tmp'</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> contextlib</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NonFatalError</span><span class="params">(Exception)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">non_idempotent_operation</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">raise</span> NonFatalError(</span><br><span class="line">        <span class="string">'The operation failed because of existing state'</span></span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> contextlib.suppress(NonFatalError):</span><br><span class="line">    print(<span class="string">'trying non-idempotent operation'</span>)</span><br><span class="line">    non_idempotent_operation()</span><br><span class="line">    print(<span class="string">'succeeded!'</span>)</span><br><span class="line"></span><br><span class="line">print(<span class="string">'done'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># output</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">trying non-idempotent operation</span></span><br><span class="line"><span class="string">done</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure><p>supress中需要传入异常名称，不能为空。</p><p>以上就是 contextlib中 contextmanager 和 suppress 的用法。</p>]]></content>
      
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pg数据库创建分区表</title>
      <link href="/2019/11/29/pg%E6%95%B0%E6%8D%AE%E5%BA%93%E5%88%9B%E5%BB%BA%E5%88%86%E5%8C%BA%E8%A1%A8/"/>
      <url>/2019/11/29/pg%E6%95%B0%E6%8D%AE%E5%BA%93%E5%88%9B%E5%BB%BA%E5%88%86%E5%8C%BA%E8%A1%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="PostgreSQL中创建分区表"><a href="#PostgreSQL中创建分区表" class="headerlink" title="PostgreSQL中创建分区表"></a>PostgreSQL中创建分区表</h2><p>提高应用程序查询数据库效率方面，除了优化程序中的代码，对数据库的管理与维护也是很重要的一方面。比如在开发阶段表中字段的类型、是否创建索引、大表是否创建分区表及是否单独指定表空间等。下面以postgresql 10.8(以下简称pg)为例，介绍下在pg中如何创建分区表。</p><p>首先，贴出来pg的官方文档，上面讲的还是比较详细的：</p><p><a href="https://www.postgresql.org/docs/10/index.html" target="_blank" rel="noopener">https://www.postgresql.org/docs/10/index.html</a></p><p>pg中有两种分区方式，一个是pg提供的内建分区方式，另一种是自定义创建分区的方式。</p><h3 id="内建分区方式"><a href="#内建分区方式" class="headerlink" title="内建分区方式"></a>内建分区方式</h3><p>内建分区表类型：范围分区，列表分区。下面以范围分区为例。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 创建分区主表，以call_time作为范围分区</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> partition_test_table_master</span><br><span class="line">(</span><br><span class="line">    <span class="keyword">id</span>  <span class="built_in">SERIAL</span> <span class="keyword">not</span> <span class="literal">null</span>,</span><br><span class="line">    call_time   <span class="built_in">date</span> <span class="keyword">not</span> <span class="literal">null</span>,</span><br><span class="line">    session_id  <span class="built_in">char</span>(<span class="number">64</span>),</span><br><span class="line">    user_input  <span class="built_in">char</span>(<span class="number">1024</span>),</span><br><span class="line">    intention   <span class="built_in">char</span>(<span class="number">1024</span>)</span><br><span class="line">) <span class="keyword">PARTITION</span> <span class="keyword">BY</span> <span class="keyword">RANGE</span> (call_time);</span><br></pre></td></tr></table></figure><p>创建分区表时，也可以使用多个字段作为分区键。如果使用多个字段作为分区键，可能会创建大量子分区，每个子分区占用的空间会变小。<br>当使用较少的字段作为分区键时，可能会以粗粒度的标准创建若干分区，分区数量也会相对变少，当有查询满足条件时，扫描的分区也会减少。</p><p>当插入的数据没有被分到任何分区时，会报错，这时我们可以手工创建一个新分区存放这些数据。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 创建分区表</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> partition_2019_06 </span><br><span class="line"><span class="keyword">PARTITION</span> <span class="keyword">OF</span> partition_test_table_master</span><br><span class="line"><span class="keyword">FOR</span> <span class="keyword">VALUES</span> <span class="keyword">FROM</span> (<span class="string">'2019-06-01 00:00:00'</span>) <span class="keyword">TO</span> (<span class="string">'2019-07-01 00:00:00'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> partition_2019_07</span><br><span class="line"><span class="keyword">PARTITION</span> <span class="keyword">OF</span> partition_test_table_master</span><br><span class="line"><span class="keyword">FOR</span> <span class="keyword">VALUES</span> <span class="keyword">FROM</span> (<span class="string">'2019-07-01 00:00:00'</span>) <span class="keyword">TO</span> (<span class="string">'2019-08-01 00:00:00'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 创建子分区并指定所在表空间，将大表单独保存在一个表空间中，也可以提高查询效率</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> partition_2019_08</span><br><span class="line"><span class="keyword">PARTITION</span> <span class="keyword">OF</span> partition_test_table_master</span><br><span class="line"><span class="keyword">FOR</span> <span class="keyword">VALUES</span> <span class="keyword">FROM</span> (<span class="string">'2019-08-01 00:00:00'</span>) <span class="keyword">TO</span> (<span class="string">'2019-09-01 00:00:00'</span>)</span><br><span class="line"><span class="keyword">TABLESPACE</span> tablespace_test;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 为子分区创建索引</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">INDEX</span> <span class="keyword">ON</span> partition_2019_06 (call_time);</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">INDEX</span> <span class="keyword">ON</span> partition_2019_06 (session_id);</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 向分区表中插入数据</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> public.partition_test_table_master(</span><br><span class="line">    call_time, session_id, user_input, intention)</span><br><span class="line">    <span class="keyword">VALUES</span> (<span class="keyword">now</span>(), <span class="string">'wyzaneitnfyhwyq'</span>, <span class="string">'你好'</span>, <span class="string">'打招呼'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> public.partition_test_table_master(</span><br><span class="line">    call_time, session_id, user_input, intention)</span><br><span class="line">    <span class="keyword">VALUES</span> (<span class="string">'2019-06-01 00:00:00'</span>, <span class="string">'wyzaneitnfyhwyq'</span>, <span class="string">'你好'</span>, <span class="string">'打招呼'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> public.partition_test_table_master(</span><br><span class="line">    call_time, session_id, user_input, intention)</span><br><span class="line">    <span class="keyword">VALUES</span> (<span class="string">'2019-07-01 00:00:00'</span>, <span class="string">'wyzaneitnfyhwyq'</span>, <span class="string">'你好'</span>, <span class="string">'打招呼'</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> public.partition_test_table_master(</span><br><span class="line">    call_time, session_id, user_input, intention)</span><br><span class="line">    <span class="keyword">VALUES</span> (<span class="string">'2019-08-23 00:00:00'</span>, <span class="string">'wyzaneitnfyhwyq'</span>, <span class="string">'你好'</span>, <span class="string">'打招呼'</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> public.partition_test_table_master(</span><br><span class="line">    call_time, session_id, user_input, intention)</span><br><span class="line">    <span class="keyword">VALUES</span> (<span class="string">'2019-04-23 00:00:00'</span>, <span class="string">'wyzaneitnfyhwyq'</span>, <span class="string">'你好'</span>, <span class="string">'打招呼'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> public.partition_test_table_master(</span><br><span class="line">    call_time, session_id, user_input, intention)</span><br><span class="line">    <span class="keyword">VALUES</span> (<span class="string">'2019-10-23 00:00:00'</span>, <span class="string">'wyzaneitnf</span></span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 当你想删除不需要的数据时，可以直接删除子分区</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> partition_2019_06;</span><br><span class="line"><span class="comment">-- 或者可以将子分区从当前分区表中移除，但是表中的数据仍然存在，这是一种不错的处理方式</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> partition_test_table_master </span><br><span class="line">DETACH <span class="keyword">PARTITION</span> partition_2019_07;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 将一个已创建的表加入到子分区中</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> partition_2019_10</span><br><span class="line">  (<span class="keyword">LIKE</span> partition_test_table_master </span><br><span class="line">   <span class="keyword">INCLUDING</span> <span class="keyword">DEFAULTS</span> <span class="keyword">INCLUDING</span> <span class="keyword">CONSTRAINTS</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> partition_2019_10 <span class="keyword">ADD</span> <span class="keyword">CONSTRAINT</span> cons_partition_2019_10</span><br><span class="line">   <span class="keyword">CHECK</span> ( call_time &amp;gt;= DATE '2019-10-01 00:00:00' </span><br><span class="line">          AND call_time &amp;lt; DATE '2019-11-01 00:00:00' );</span><br><span class="line"></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> partition_test_table_master ATTACH <span class="keyword">PARTITION</span> partition_2019_10</span><br><span class="line">    <span class="keyword">FOR</span> <span class="keyword">VALUES</span> <span class="keyword">FROM</span> (<span class="string">'2019-10-01 00:00:00'</span>) <span class="keyword">TO</span> (<span class="string">'2019-11-01 00:00:00'</span> );</span><br></pre></td></tr></table></figure><p>上面创建分区表的缺点<br>1.必须分别对每个分区创建索引，也就是说不能在所有分区上创建主键，唯一约束，排他性约束<br>2.分区表不支持主键，也不支持外键索引<br>3.执行更新操作后，数据不能改变分区<br>4.行触发器应该单独定义在每个子分区，而不是在分区表上定义</p><h3 id="自定义分区"><a href="#自定义分区" class="headerlink" title="自定义分区"></a>自定义分区</h3><p>使用表继承的方式创建分区表</p><p>自定义分区的优势<br>1.允许子分区含有额外的列<br>2.可以多继承<br>3.可以根据用户选择的任何方式进行分区</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 创建主表</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> partition_test_table_master_2</span><br><span class="line">(</span><br><span class="line">    <span class="keyword">id</span>  <span class="built_in">SERIAL</span> <span class="keyword">not</span> <span class="literal">null</span>,</span><br><span class="line">    call_time   <span class="built_in">date</span> <span class="keyword">not</span> <span class="literal">null</span>,</span><br><span class="line">    session_id  <span class="built_in">char</span>(<span class="number">64</span>),</span><br><span class="line">    user_input  <span class="built_in">char</span>(<span class="number">1024</span>),</span><br><span class="line">    intention   <span class="built_in">char</span>(<span class="number">1024</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 创建分区表</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> partition_2019_11 (</span><br><span class="line">    <span class="keyword">CHECK</span> ( call_time &amp;gt;= DATE '2019-11-01 00:00:00' </span><br><span class="line">           AND call_time &amp;lt; DATE '2019-12-01 00:00:00' )</span><br><span class="line">) INHERITS (partition_test_table_master_2);</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> partition_2019_12 (</span><br><span class="line">    <span class="keyword">CHECK</span> ( call_time &amp;gt;= DATE '2019-12-01 00:00:00' </span><br><span class="line">           AND call_time &amp;lt; DATE '2020-01-01 00:00:00' )</span><br><span class="line">) INHERITS (partition_test_table_master_2);</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 创建索引</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">INDEX</span> idx_partition_2019_11 <span class="keyword">ON</span> partition_2019_11 (call_time);</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 创建函数，将对主表的insert操作映射到对应子分区上</span></span><br><span class="line"><span class="comment">-- NEW表示将要插入的那行数据</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">OR</span> <span class="keyword">REPLACE</span> <span class="keyword">FUNCTION</span> func_partition_insert()</span><br><span class="line"><span class="keyword">RETURNS</span> <span class="keyword">TRIGGER</span> <span class="keyword">AS</span> $$</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">    <span class="keyword">IF</span> ( NEW.call_time &amp;gt;= DATE '2019-11-01 00:00:00' AND</span><br><span class="line">         NEW.call_time &amp;lt; DATE '2019-12-01 00:00:00' ) THEN</span><br><span class="line">        <span class="keyword">INSERT</span> <span class="keyword">INTO</span> partition_2019_11 <span class="keyword">VALUES</span> (NEW.*);</span><br><span class="line">    ELSIF ( NEW.call_time &amp;gt;= DATE '2019-12-01 00:00:00' AND</span><br><span class="line">            NEW.call_time &amp;lt; DATE '2020-01-01 00:00:00' ) THEN</span><br><span class="line">        <span class="keyword">INSERT</span> <span class="keyword">INTO</span> partition_2019_12 <span class="keyword">VALUES</span> (NEW.*);</span><br><span class="line">    ELSE</span><br><span class="line">        RAISE EXCEPTION 'Date out of range.  Fix the partition_test_table_master() function!';</span><br><span class="line">    <span class="keyword">END</span> <span class="keyword">IF</span>;</span><br><span class="line">    RETURN NULL;</span><br><span class="line"><span class="keyword">END</span>;</span><br><span class="line">$$</span><br><span class="line">LANGUAGE plpgsql;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 创建触发器，每次执行插入操作时调用上面的函数</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TRIGGER</span> trigger_partition_insert</span><br><span class="line">    <span class="keyword">BEFORE</span> <span class="keyword">INSERT</span> <span class="keyword">ON</span> partition_test_table_master_2</span><br><span class="line">    <span class="keyword">FOR</span> <span class="keyword">EACH</span> <span class="keyword">ROW</span> <span class="keyword">EXECUTE</span> <span class="keyword">PROCEDURE</span> func_partition_insert();</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 插入数据，执行insert操作时，会触发trigger_partition_insert触发器</span></span><br><span class="line"><span class="comment">-- 触发器中会调用函数func_partition_insert()</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> public.partition_test_table_master_2(</span><br><span class="line">    call_time, session_id, user_input, intention)</span><br><span class="line">    <span class="keyword">VALUES</span> (<span class="string">'2019-11-23 00:00:00'</span>, <span class="string">'wyzaneitnfyhwyq'</span>, <span class="string">'你好'</span>, <span class="string">'打招呼'</span>);</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 也可以把上面的function和trigger换成rule</span></span><br><span class="line"><span class="keyword">CREATE</span> RULE rule_partition_insert_2019_11 <span class="keyword">AS</span></span><br><span class="line"><span class="keyword">ON</span> <span class="keyword">INSERT</span> <span class="keyword">TO</span> partition_test_table_master_2 <span class="keyword">WHERE</span></span><br><span class="line">    ( call_time &amp;gt;= DATE '2019-11-01 00:00:00' </span><br><span class="line">     AND call_time &amp;lt; DATE '2019-12-01 00:00:00' )</span><br><span class="line"><span class="keyword">DO</span> INSTEAD</span><br><span class="line">    <span class="keyword">INSERT</span> <span class="keyword">INTO</span> partition_2019_11 <span class="keyword">VALUES</span> (NEW.*);</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> RULE rule_partition_insert_2019_12 <span class="keyword">AS</span></span><br><span class="line"><span class="keyword">ON</span> <span class="keyword">INSERT</span> <span class="keyword">TO</span> partition_test_table_master_2 <span class="keyword">WHERE</span></span><br><span class="line">    ( call_time &amp;gt;= DATE '2019-12-01 00:00:00' </span><br><span class="line">     AND call_time &amp;lt; DATE '2020-01-01 00:00:00' )</span><br><span class="line"><span class="keyword">DO</span> INSTEAD</span><br><span class="line">    <span class="keyword">INSERT</span> <span class="keyword">INTO</span> partition_2019_12 <span class="keyword">VALUES</span> (NEW.*);</span><br></pre></td></tr></table></figure><p>通过上面的介绍，可以看出自定义分区相比于内建分区还是复杂一些，需要自定义触发器和插入数据时的逻辑。对于一般的日志表、交易流水表等，可以使用内建方式以时间分区，对于更复杂的场景，还是需要使用自定义方式创建分区。对于不熟悉pg的存储过程或者函数语法的同学，可能编写函数或者触发器有些困难。pg的存储过程或者函数的语法与oracle和mysql的语法有很多相似之处。</p>]]></content>
      
      
      
        <tags>
            
            <tag> DB </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Django处理请求流程</title>
      <link href="/2019/11/28/Django%E5%A4%84%E7%90%86%E8%AF%B7%E6%B1%82%E6%B5%81%E7%A8%8B/"/>
      <url>/2019/11/28/Django%E5%A4%84%E7%90%86%E8%AF%B7%E6%B1%82%E6%B5%81%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<p>Django是Python的一个web框架，Django应用通过wsgi服务器与客户端进行http通信。今天介绍下从Django接收客户端http请求到生成响应过程中的流程。</p><h2 id="1-请求响应流程"><a href="#1-请求响应流程" class="headerlink" title="1. 请求响应流程"></a>1. 请求响应流程</h2><p>整体流程如下：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">get_wsgi_application() --&gt; WSGIHandler() --&gt; self.load_middleware() --&gt; __call__() --&gt; self.get_response() --&gt; self._get_response()</span><br></pre></td></tr></table></figure><p>request 经过 self._get_response()后，就生成了 response。</p><h2 id="2-请求响应具体流程"><a href="#2-请求响应具体流程" class="headerlink" title="2. 请求响应具体流程"></a>2. 请求响应具体流程</h2><h3 id="2-1-WSGIHandler-初始化"><a href="#2-1-WSGIHandler-初始化" class="headerlink" title="2.1 WSGIHandler 初始化"></a>2.1 WSGIHandler 初始化</h3><p>WSGIHandler类如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WSGIHandler</span><span class="params">(base.BaseHandler)</span>:</span></span><br><span class="line">    request_class = WSGIRequest</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, *args, **kwargs)</span>:</span></span><br><span class="line">        super().__init__(*args, **kwargs)</span><br><span class="line">        self.load_middleware()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__call__</span><span class="params">(self, environ, start_response)</span>:</span></span><br><span class="line">        set_script_prefix(get_script_name(environ))</span><br><span class="line">        signals.request_started.send(sender=self.__class__, environ=environ)</span><br><span class="line">        request = self.request_class(environ)</span><br><span class="line">        response = self.get_response(request)</span><br><span class="line"></span><br><span class="line">        response._handler_class = self.__class__</span><br><span class="line"></span><br><span class="line">        status = <span class="string">'%d %s'</span> % (response.status_code, response.reason_phrase)</span><br><span class="line">        response_headers = [</span><br><span class="line">            *response.items(),</span><br><span class="line">            *((<span class="string">'Set-Cookie'</span>, c.output(header=<span class="string">''</span>)) <span class="keyword">for</span> c <span class="keyword">in</span> response.cookies.values()),</span><br><span class="line">        ]</span><br><span class="line">        start_response(status, response_headers)</span><br><span class="line">        <span class="keyword">if</span> getattr(response, <span class="string">'file_to_stream'</span>, <span class="literal">None</span>) <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span> <span class="keyword">and</span> environ.get(<span class="string">'wsgi.file_wrapper'</span>):</span><br><span class="line">            response = environ[<span class="string">'wsgi.file_wrapper'</span>](response.file_to_stream)</span><br><span class="line">        <span class="keyword">return</span> response</span><br></pre></td></tr></table></figure><p>wsgi服务器接收到请求后，会初始化 WSGIHandler类，并调用__call__()方法。初始化时，会调用BaseHandler中的 load_middleware()方法。</p><p>self.load_middleware()方法如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">load_middleware</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    Populate middleware lists from settings.MIDDLEWARE.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Must be called after the environment is fixed (see __call__ in subclasses).</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    self._view_middleware = []</span><br><span class="line">    self._template_response_middleware = []</span><br><span class="line">    self._exception_middleware = []</span><br><span class="line"></span><br><span class="line">    handler = convert_exception_to_response(self._get_response)</span><br><span class="line">    <span class="keyword">for</span> middleware_path <span class="keyword">in</span> reversed(settings.MIDDLEWARE):</span><br><span class="line">        middleware = import_string(middleware_path)</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            mw_instance = middleware(handler)</span><br><span class="line">        <span class="keyword">except</span> MiddlewareNotUsed <span class="keyword">as</span> exc:</span><br><span class="line">            <span class="keyword">if</span> settings.DEBUG:</span><br><span class="line">                <span class="keyword">if</span> str(exc):</span><br><span class="line">                    logger.debug(<span class="string">'MiddlewareNotUsed(%r): %s'</span>, middleware_path, exc)</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    logger.debug(<span class="string">'MiddlewareNotUsed: %r'</span>, middleware_path)</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> mw_instance <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">raise</span> ImproperlyConfigured(</span><br><span class="line">                <span class="string">'Middleware factory %s returned None.'</span> % middleware_path</span><br><span class="line">            )</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> hasattr(mw_instance, <span class="string">'process_view'</span>):</span><br><span class="line">            self._view_middleware.insert(<span class="number">0</span>, mw_instance.process_view)</span><br><span class="line">        <span class="keyword">if</span> hasattr(mw_instance, <span class="string">'process_template_response'</span>):</span><br><span class="line">            self._template_response_middleware.append(mw_instance.process_template_response)</span><br><span class="line">        <span class="keyword">if</span> hasattr(mw_instance, <span class="string">'process_exception'</span>):</span><br><span class="line">            self._exception_middleware.append(mw_instance.process_exception)</span><br><span class="line"></span><br><span class="line">        handler = convert_exception_to_response(mw_instance)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># We only assign to this when initialization is complete as it is used</span></span><br><span class="line">    <span class="comment"># as a flag for initialization being complete.</span></span><br><span class="line">    self._middleware_chain = handler</span><br></pre></td></tr></table></figure><p>load_middleware()方法中主要做了一下几步操作：</p><ol><li><p>调用 convert_exception_to_response() 方法，返回一个可调用对象，该方法接收另一个方法（这个方法负责处理request）作为参数</p><p>convert_exception_to_response() 方法如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">convert_exception_to_response</span><span class="params">(get_response)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    Wrap the given get_response callable in exception-to-response conversion.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    All exceptions will be converted. All known 4xx exceptions (Http404,</span></span><br><span class="line"><span class="string">    PermissionDenied, MultiPartParserError, SuspiciousOperation) will be</span></span><br><span class="line"><span class="string">    converted to the appropriate response, and all other exceptions will be</span></span><br><span class="line"><span class="string">    converted to 500 responses.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    This decorator is automatically applied to all middleware to ensure that</span></span><br><span class="line"><span class="string">    no middleware leaks an exception and that the next middleware in the stack</span></span><br><span class="line"><span class="string">    can rely on getting a response instead of an exception.</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line"><span class="meta">    @wraps(get_response)</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inner</span><span class="params">(request)</span>:</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            response = get_response(request)</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> exc:</span><br><span class="line">            response = response_for_exception(request, exc)</span><br><span class="line">        <span class="keyword">return</span> response</span><br><span class="line">    <span class="keyword">return</span> inner</span><br></pre></td></tr></table></figure><p>该方法中用到了装饰器。</p></li><li><p>mw_instance = middleware(handler)， 这一行代码会创建中间件的实例对象，后面的几个if语句再逐个判断中间件对象中是否定义了 process_view()、process_exception()等方法。</p></li><li><p>handler = convert_exception_to_response(mw_instance)，这一行代码将中间件实例作为参数传入方法中，返回一个可调用对象。这里将中间件对象作为参数，后面会调用中间件中的__call__()方法来处理request。Django中，中间件类MiddlewareMixin的实现如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MiddlewareMixin</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, get_response=None)</span>:</span></span><br><span class="line">        self.get_response = get_response</span><br><span class="line">        super().__init__()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__call__</span><span class="params">(self, request)</span>:</span></span><br><span class="line">        response = <span class="literal">None</span></span><br><span class="line">        <span class="keyword">if</span> hasattr(self, <span class="string">'process_request'</span>):</span><br><span class="line">            response = self.process_request(request)</span><br><span class="line">        response = response <span class="keyword">or</span> self.get_response(request)</span><br><span class="line">        <span class="keyword">if</span> hasattr(self, <span class="string">'process_response'</span>):</span><br><span class="line">            response = self.process_response(request, response)</span><br><span class="line">        <span class="keyword">return</span> response</span><br></pre></td></tr></table></figure></li><li><p>最后一行代码 self._middleware_chain = handler 是将handler赋值给 _middleware_chain 属性。</p></li></ol><h3 id="2-2-WSGIHandler-call-方法"><a href="#2-2-WSGIHandler-call-方法" class="headerlink" title="2.2 WSGIHandler call()方法"></a>2.2 WSGIHandler call()方法</h3><p>WSGIHandler初始化完成后，会调用__call__()方法，该方法用来处理 request，返回response，实现如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__call__</span><span class="params">(self, environ, start_response)</span>:</span></span><br><span class="line">    set_script_prefix(get_script_name(environ))</span><br><span class="line">    signals.request_started.send(sender=self.__class__, environ=environ)</span><br><span class="line">    request = self.request_class(environ)</span><br><span class="line">    response = self.get_response(request)</span><br><span class="line"></span><br><span class="line">    response._handler_class = self.__class__</span><br><span class="line"></span><br><span class="line">    status = <span class="string">'%d %s'</span> % (response.status_code, response.reason_phrase)</span><br><span class="line">    response_headers = [</span><br><span class="line">        *response.items(),</span><br><span class="line">        *((<span class="string">'Set-Cookie'</span>, c.output(header=<span class="string">''</span>)) <span class="keyword">for</span> c <span class="keyword">in</span> response.cookies.values()),</span><br><span class="line">    ]</span><br><span class="line">    start_response(status, response_headers)</span><br><span class="line">    <span class="keyword">if</span> getattr(response, <span class="string">'file_to_stream'</span>, <span class="literal">None</span>) <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span> <span class="keyword">and</span> environ.get(<span class="string">'wsgi.file_wrapper'</span>):</span><br><span class="line">        response = environ[<span class="string">'wsgi.file_wrapper'</span>](response.file_to_stream)</span><br><span class="line">    <span class="keyword">return</span> response</span><br></pre></td></tr></table></figure><p>__call__()方法主要做了下面一些操作: </p><ol><li>self.request_class(environ) 这一行将 http request对象 转换为 wsgi request对象</li><li>self.get_response(request) 这一行代码会调用BaseHandler的get_response()方法，生成 http response对象。</li></ol><p>下面具体介绍下self.get_response() 这个方法。</p><h3 id="2-3-get-response-方法"><a href="#2-3-get-response-方法" class="headerlink" title="2.3 get_response() 方法"></a>2.3 get_response() 方法</h3><p>BaseHandler的get_response()方法用来处理request，并生成response。get_response()的源码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_response</span><span class="params">(self, request)</span>:</span></span><br><span class="line">    <span class="string">"""Return an HttpResponse object for the given HttpRequest."""</span></span><br><span class="line">    <span class="comment"># Setup default url resolver for this thread</span></span><br><span class="line">    set_urlconf(settings.ROOT_URLCONF)</span><br><span class="line">    response = self._middleware_chain(request)</span><br><span class="line">    response._closable_objects.append(request)</span><br><span class="line">    <span class="keyword">if</span> response.status_code &gt;= <span class="number">400</span>:</span><br><span class="line">        log_response(</span><br><span class="line">            <span class="string">'%s: %s'</span>, response.reason_phrase, request.path,</span><br><span class="line">            response=response,</span><br><span class="line">            request=request,</span><br><span class="line">        )</span><br><span class="line">    <span class="keyword">return</span> response</span><br></pre></td></tr></table></figure><p>主要是 response = self._middleware_chain(request) 这一行代码，将 request 作为参数传入上文说到的 self._middleware_chain中，输出response。具体执行流程如下：</p><ol><li><p>上文说到，在 self.load_middleware()中会执行下面的代码：</p><p>handler = convert_exception_to_response(self._get_response)</p><p>convert_exception_to_response()方法的实现如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">convert_exception_to_response</span><span class="params">(get_response)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    Wrap the given get_response callable in exception-to-response conversion.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    All exceptions will be converted. All known 4xx exceptions (Http404,</span></span><br><span class="line"><span class="string">    PermissionDenied, MultiPartParserError, SuspiciousOperation) will be</span></span><br><span class="line"><span class="string">    converted to the appropriate response, and all other exceptions will be</span></span><br><span class="line"><span class="string">    converted to 500 responses.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    This decorator is automatically applied to all middleware to ensure that</span></span><br><span class="line"><span class="string">    no middleware leaks an exception and that the next middleware in the stack</span></span><br><span class="line"><span class="string">    can rely on getting a response instead of an exception.</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line"><span class="meta">    @wraps(get_response)</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inner</span><span class="params">(request)</span>:</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            response = get_response(request)</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> exc:</span><br><span class="line">            response = response_for_exception(request, exc)</span><br><span class="line">        <span class="keyword">return</span> response</span><br><span class="line">    <span class="keyword">return</span> inner</span><br></pre></td></tr></table></figure><p>所以，self._middleware_chain(request) 最终是调用了 self._get_response(request) 这个方法。</p></li><li><p>self._get_response()的实现如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_get_response</span><span class="params">(self, request)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    Resolve and call the view, then apply view, exception, and</span></span><br><span class="line"><span class="string">    template_response middleware. This method is everything that happens</span></span><br><span class="line"><span class="string">    inside the request/response middleware.</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    response = <span class="literal">None</span></span><br><span class="line">   </span><br><span class="line">    <span class="keyword">if</span> hasattr(request, <span class="string">'urlconf'</span>):</span><br><span class="line">        urlconf = request.urlconf</span><br><span class="line">        set_urlconf(urlconf)</span><br><span class="line">        resolver = get_resolver(urlconf)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        resolver = get_resolver()</span><br><span class="line">   </span><br><span class="line">    resolver_match = resolver.resolve(request.path_info)</span><br><span class="line">    callback, callback_args, callback_kwargs = resolver_match</span><br><span class="line">    request.resolver_match = resolver_match</span><br><span class="line">   </span><br><span class="line">    <span class="comment"># Apply view middleware</span></span><br><span class="line">    <span class="keyword">for</span> middleware_method <span class="keyword">in</span> self._view_middleware:</span><br><span class="line">        response = middleware_method(request, callback, callback_args, callback_kwargs)</span><br><span class="line">        <span class="keyword">if</span> response:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">   </span><br><span class="line">    <span class="keyword">if</span> response <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        wrapped_callback = self.make_view_atomic(callback)</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            response = wrapped_callback(request, *callback_args, **callback_kwargs)</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            response = self.process_exception_by_middleware(e, request)</span><br><span class="line">   </span><br><span class="line">    <span class="comment"># Complain if the view returned None (a common error).</span></span><br><span class="line">    <span class="keyword">if</span> response <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        <span class="keyword">if</span> isinstance(callback, types.FunctionType):    <span class="comment"># FBV</span></span><br><span class="line">            view_name = callback.__name__</span><br><span class="line">        <span class="keyword">else</span>:                                           <span class="comment"># CBV</span></span><br><span class="line">            view_name = callback.__class__.__name__ + <span class="string">'.__call__'</span></span><br><span class="line">   </span><br><span class="line">        <span class="keyword">raise</span> ValueError(</span><br><span class="line">            <span class="string">"The view %s.%s didn't return an HttpResponse object. It "</span></span><br><span class="line">            <span class="string">"returned None instead."</span> % (callback.__module__, view_name)</span><br><span class="line">        )</span><br><span class="line">   </span><br><span class="line">    <span class="comment"># If the response supports deferred rendering, apply template</span></span><br><span class="line">    <span class="comment"># response middleware and then render the response</span></span><br><span class="line">    <span class="keyword">elif</span> hasattr(response, <span class="string">'render'</span>) <span class="keyword">and</span> callable(response.render):</span><br><span class="line">        <span class="keyword">for</span> middleware_method <span class="keyword">in</span> self._template_response_middleware:</span><br><span class="line">            response = middleware_method(request, response)</span><br><span class="line">            <span class="comment"># Complain if the template response middleware returned None (a common error).</span></span><br><span class="line">            <span class="keyword">if</span> response <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">                <span class="keyword">raise</span> ValueError(</span><br><span class="line">                    <span class="string">"%s.process_template_response didn't return an "</span></span><br><span class="line">                    <span class="string">"HttpResponse object. It returned None instead."</span></span><br><span class="line">                    % (middleware_method.__self__.__class__.__name__)</span><br><span class="line">                )</span><br><span class="line">   </span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            response = response.render()</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            response = self.process_exception_by_middleware(e, request)</span><br><span class="line">   </span><br><span class="line">    <span class="keyword">return</span> response</span><br></pre></td></tr></table></figure><p>该方法中，主要进行了以下几步操作：路由解析 –&gt; 中间件校验 –&gt; 调用视图函数获取response</p></li><li><p>下面介绍下 “路由解析” 的流程：</p><p>1）读取 settings 配置文件中的 ROOT_URLCONF 信息获取路由配置，获取 URLResolver 对象，即执行了下面的方法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@functools.lru_cache(maxsize=None)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_resolver</span><span class="params">(urlconf=None)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> urlconf <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        urlconf = settings.ROOT_URLCONF</span><br><span class="line">    <span class="keyword">return</span> URLResolver(RegexPattern(<span class="string">r'^/'</span>), urlconf)</span><br></pre></td></tr></table></figure><p>2）然后再执行 resolver_match = resolver.resolve(request.path_info) 这行代码，resolve()方法的实现如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">resolve</span><span class="params">(self, path)</span>:</span></span><br><span class="line">    path = str(path)  <span class="comment"># path may be a reverse_lazy object</span></span><br><span class="line">    tried = []</span><br><span class="line">    match = self.pattern.match(path)</span><br><span class="line">    <span class="keyword">if</span> match:</span><br><span class="line">        new_path, args, kwargs = match</span><br><span class="line">        <span class="keyword">for</span> pattern <span class="keyword">in</span> self.url_patterns:</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                sub_match = pattern.resolve(new_path)</span><br><span class="line">            <span class="keyword">except</span> Resolver404 <span class="keyword">as</span> e:</span><br><span class="line">                sub_tried = e.args[<span class="number">0</span>].get(<span class="string">'tried'</span>)</span><br><span class="line">                <span class="keyword">if</span> sub_tried <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">                    tried.extend([pattern] + t <span class="keyword">for</span> t <span class="keyword">in</span> sub_tried)</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    tried.append([pattern])</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">if</span> sub_match:</span><br><span class="line">                    <span class="comment"># Merge captured arguments in match with submatch</span></span><br><span class="line">                    sub_match_dict = &#123;**kwargs, **self.default_kwargs&#125;</span><br><span class="line">                    <span class="comment"># Update the sub_match_dict with the kwargs from the sub_match.</span></span><br><span class="line">                    sub_match_dict.update(sub_match.kwargs)</span><br><span class="line">                    <span class="comment"># If there are *any* named groups, ignore all non-named groups.</span></span><br><span class="line">                    <span class="comment"># Otherwise, pass all non-named arguments as positional arguments.</span></span><br><span class="line">                    sub_match_args = sub_match.args</span><br><span class="line">                    <span class="keyword">if</span> <span class="keyword">not</span> sub_match_dict:</span><br><span class="line">                        sub_match_args = args + sub_match.args</span><br><span class="line">                    current_route = <span class="string">''</span> <span class="keyword">if</span> isinstance(pattern, URLPattern) <span class="keyword">else</span> str(pattern.pattern)</span><br><span class="line">                    <span class="keyword">return</span> ResolverMatch(</span><br><span class="line">                        sub_match.func,</span><br><span class="line">                        sub_match_args,</span><br><span class="line">                        sub_match_dict,</span><br><span class="line">                        sub_match.url_name,</span><br><span class="line">                        [self.app_name] + sub_match.app_names,</span><br><span class="line">                        [self.namespace] + sub_match.namespaces,</span><br><span class="line">                        self._join_route(current_route, sub_match.route),</span><br><span class="line">                    )</span><br><span class="line">                tried.append([pattern])</span><br><span class="line">        <span class="keyword">raise</span> Resolver404(&#123;<span class="string">'tried'</span>: tried, <span class="string">'path'</span>: new_path&#125;)</span><br><span class="line">    <span class="keyword">raise</span> Resolver404(&#123;<span class="string">'path'</span>: path&#125;)</span><br></pre></td></tr></table></figure><p>函数返回了一个 ResolverMatch类的实例，后面通过这个实例，在获取处理请求的试图方法、请求参数等信息。该函数中，有下面一行代码 sub_match = pattern.resolve(new_path)，这行代码会返回一个 ResolverMatch() 对象，就是通过这个对象，来决定执行哪个视图的哪个方法。</p><p>3）我们先来看看配置 url 时的三个方法：path, include, as_view。在下面的配置中会使用这三个方法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path, include</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">'admin/'</span>, admin.site.urls),</span><br><span class="line">    path(<span class="string">'test01/'</span>, include(<span class="string">'cron.urls'</span>)),</span><br><span class="line">    path(<span class="string">"test02/"</span>, include(<span class="string">'cron02.urls'</span>)),</span><br><span class="line">    path(<span class="string">"middleware/"</span>, include(<span class="string">'test_middleware.urls'</span>)),</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> .views <span class="keyword">import</span> TestView</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">"cron/"</span>, TestView.as_view()),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>其中，path方法实现如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_path</span><span class="params">(route, view, kwargs=None, name=None, Pattern=None)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> isinstance(view, (list, tuple)):</span><br><span class="line">        <span class="comment"># For include(...) processing.</span></span><br><span class="line">        pattern = Pattern(route, is_endpoint=<span class="literal">False</span>)</span><br><span class="line">        urlconf_module, app_name, namespace = view</span><br><span class="line">        <span class="keyword">return</span> URLResolver(</span><br><span class="line">            pattern,</span><br><span class="line">            urlconf_module,</span><br><span class="line">            kwargs,</span><br><span class="line">            app_name=app_name,</span><br><span class="line">            namespace=namespace,</span><br><span class="line">        )</span><br><span class="line">    <span class="keyword">elif</span> callable(view):</span><br><span class="line">        pattern = Pattern(route, name=name, is_endpoint=<span class="literal">True</span>)</span><br><span class="line">        <span class="keyword">return</span> URLPattern(pattern, view, kwargs, name)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">raise</span> TypeError(<span class="string">'view must be a callable or a list/tuple in the case of include().'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">path = partial(_path, Pattern=RoutePattern)</span><br></pre></td></tr></table></figure><p>根据view参数的类型不同，会执行不同的代码块。当path的第二个参数是TestView.as_view()时，会满足callable(view)这个条件，返回一个URLPattern类的对象，注意此时 view是可调用的。as_view()的实现如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@classonlymethod</span></span><br><span class="line">   <span class="function"><span class="keyword">def</span> <span class="title">as_view</span><span class="params">(cls, **initkwargs)</span>:</span></span><br><span class="line">       <span class="string">"""Main entry point for a request-response process."""</span></span><br><span class="line">       <span class="keyword">for</span> key <span class="keyword">in</span> initkwargs:</span><br><span class="line">           <span class="keyword">if</span> key <span class="keyword">in</span> cls.http_method_names:</span><br><span class="line">               <span class="keyword">raise</span> TypeError(<span class="string">"You tried to pass in the %s method name as a "</span></span><br><span class="line">                               <span class="string">"keyword argument to %s(). Don't do that."</span></span><br><span class="line">                               % (key, cls.__name__))</span><br><span class="line">           <span class="keyword">if</span> <span class="keyword">not</span> hasattr(cls, key):</span><br><span class="line">               <span class="keyword">raise</span> TypeError(<span class="string">"%s() received an invalid keyword %r. as_view "</span></span><br><span class="line">                               <span class="string">"only accepts arguments that are already "</span></span><br><span class="line">                               <span class="string">"attributes of the class."</span> % (cls.__name__, key))</span><br><span class="line">   </span><br><span class="line">       <span class="function"><span class="keyword">def</span> <span class="title">view</span><span class="params">(request, *args, **kwargs)</span>:</span></span><br><span class="line">           self = cls(**initkwargs)</span><br><span class="line">           <span class="keyword">if</span> hasattr(self, <span class="string">'get'</span>) <span class="keyword">and</span> <span class="keyword">not</span> hasattr(self, <span class="string">'head'</span>):</span><br><span class="line">               self.head = self.get</span><br><span class="line">           self.setup(request, *args, **kwargs)</span><br><span class="line">           <span class="keyword">if</span> <span class="keyword">not</span> hasattr(self, <span class="string">'request'</span>):</span><br><span class="line">               <span class="keyword">raise</span> AttributeError(</span><br><span class="line">                   <span class="string">"%s instance has no 'request' attribute. Did you override "</span></span><br><span class="line">                   <span class="string">"setup() and forget to call super()?"</span> % cls.__name__</span><br><span class="line">               )</span><br><span class="line">           <span class="keyword">return</span> self.dispatch(request, *args, **kwargs)</span><br><span class="line">       view.view_class = cls</span><br><span class="line">       view.view_initkwargs = initkwargs</span><br><span class="line">   </span><br><span class="line">       <span class="comment"># take name and docstring from class</span></span><br><span class="line">       update_wrapper(view, cls, updated=())</span><br><span class="line">   </span><br><span class="line">       <span class="comment"># and possible attributes set by decorators</span></span><br><span class="line">       <span class="comment"># like csrf_exempt from dispatch</span></span><br><span class="line">       update_wrapper(view, cls.dispatch, assigned=())</span><br><span class="line">       <span class="keyword">return</span> view</span><br></pre></td></tr></table></figure><p>as_view() 方法的主要功能就是根据 request 参数，确定要执行 view 中的哪个方法(post, get, put等)，当有代码调用 view 时，就会执行相应的 http 方法并返回 response。</p><p>4）然后我们在回到 2）步结束的地方，当执行 sub_match = pattern.resolve(new_path) 这行代码时，会执行 URLPattern 中的 resolve()方法，返回 ResolverMatch对象，ResolverMatch对象初始化时的参数 func 的值就是 3）中 path()方法中的 view，后面会调用 view 这个函数获取response。</p><p>5）最后，在 _get_response() 中会调用上面的 view函数，这部分代码为：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> response <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">    wrapped_callback = self.make_view_atomic(callback)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        response = wrapped_callback(request, *callback_args, **callback_kwargs)</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        response = self.process_exception_by_middleware(e, request)</span><br></pre></td></tr></table></figure><p>首先判断是否需要添加事务，然后再执行 callback 函数，最后返回 response。</p></li></ol><p>   以上就是 Django 处理 http 请求的大致流程，从源码中我们要能学习到写 python 代码的一些技巧。</p>]]></content>
      
      
      
        <tags>
            
            <tag> django </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何使用github搭建个人博客</title>
      <link href="/2019/11/28/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8github%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
      <url>/2019/11/28/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8github%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<p>最近使用 hexo + github 搭建了一个博客系统，现总结搭建步骤并记录如下。</p><h2 id="1-安装相关软件"><a href="#1-安装相关软件" class="headerlink" title="1. 安装相关软件"></a>1. 安装相关软件</h2><p>在windows上安装 node.js，npm，git，具体安装步骤可以百度。</p><h2 id="2-创建github仓库"><a href="#2-创建github仓库" class="headerlink" title="2. 创建github仓库"></a>2. 创建github仓库</h2><p>在github上创建名称为 你的用户名.github.io 的仓库，后面搭建成功后，可以在浏览器上输入 https://你的用户名.github.io 来访问博客。</p><p>仓库创建成功后，需要配置SSH Key，以便后续提交博客到仓库中。在windows下 git 的命令行中输入 ssh-keygen 生成 公钥和私钥（公、私钥的文件名称使用默认的即可，不使用默认的文件名后需提交博客可能提示无权限），生成文件后，将 id_rsa.pub 中的内容添加到 仓库 –&gt; Settings –&gt; Deploy key 中。</p><h2 id="3-使用hexo写博客"><a href="#3-使用hexo写博客" class="headerlink" title="3. 使用hexo写博客"></a>3. 使用hexo写博客</h2><p>hexo是一个快速、简单、功能强大的博客框架，在Markdown中写好博客后，hexo可以使用优美的主题将博客生成静态文件。 其官网如下：<a href="http://hexo.io/" target="_blank" rel="noopener">http://hexo.io</a></p><h3 id="3-1-安装hexo并初始化"><a href="#3-1-安装hexo并初始化" class="headerlink" title="3.1 安装hexo并初始化"></a>3.1 安装hexo并初始化</h3><p>使用 npm 安装 hexo：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo</span><br></pre></td></tr></table></figure><p>然后在本地文件夹新建 hexo工作目录并初始化该目录：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd D:\hexo</span><br><span class="line">hexo init</span><br></pre></td></tr></table></figure><p>初始化过程中会下载一些 js 模块，存放在 node_modules 文件夹下。</p><p>然后可以执行下面的命令：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo g  # hexo generate 的缩写，生成静态页面至public目录下</span><br><span class="line">hexo s  # hexo server 的缩写， 启动服务 （默认 http://localhost:4000）</span><br></pre></td></tr></table></figure><p>在浏览器上访问 <a href="http://localhost:4000，可以看到有一篇默认的博客和主题。" target="_blank" rel="noopener">http://localhost:4000，可以看到有一篇默认的博客和主题。</a></p><h3 id="3-2-更换主题"><a href="#3-2-更换主题" class="headerlink" title="3.2 更换主题"></a>3.2 更换主题</h3><p>官方主题：<a href="https://hexo.io/themes/" target="_blank" rel="noopener">https://hexo.io/themes/</a></p><p>可以到这里寻找自己喜欢的主题，并将其克隆到 hexo工作目录的themes目录下；然后在hexo目录下的_config.yml文件中修改 theme的配置（例如 修改 theme: landscape 为 theme: clean-blog）；最后执行hexo g命令即可。</p><p>更改完主题后，可以重启服务，访问 <a href="http://localhost:4000，查看主题的效果。" target="_blank" rel="noopener">http://localhost:4000，查看主题的效果。</a></p><h3 id="3-3-deploy配置"><a href="#3-3-deploy配置" class="headerlink" title="3.3 deploy配置"></a>3.3 deploy配置</h3><p>在 _config.yml 文件中修改下面的配置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repository: git@github.com:wyzane/wyzane.github.io.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure><p>将 repository 的值修改成你自己的github仓库名，修改完成后，执行 hexo d（hexo deploy）就可以将代码提交至执行的github仓库中。</p><h3 id="3-4-编写博客"><a href="#3-4-编写博客" class="headerlink" title="3.4 编写博客"></a>3.4 编写博客</h3><p>执行 hexo new “文章名称” 会在 hexo的 source\_posts目录下新建一篇文章，文章是Markdown格式，推荐使用Typora软件来编辑md文件。</p><p>编辑好文章后，执行 hexo g命令，会将md文件转换成html静态文件并添加到public目录下对应的目录中，最后执行 hexo d将更新提交至github仓库中。</p><p>访问上面提到的地址，就可以看到新增的博客文章。</p><h3 id="3-5-hexo常用命令"><a href="#3-5-hexo常用命令" class="headerlink" title="3.5 hexo常用命令"></a>3.5 hexo常用命令</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">hexo new "name" # 新建文章</span><br><span class="line">hexo new page "name" # 新建页面</span><br><span class="line">hexo generate # 生成静态页面至public目录</span><br><span class="line">hexo server # 开启预览访问端口（默认端口4000，'ctrl + c'关闭server）</span><br><span class="line">hexo deploy # 部署到GitHub</span><br><span class="line">hexo help  # 查看帮助</span><br><span class="line">hexo version  # 查看Hexo的版本</span><br><span class="line"></span><br><span class="line"># 缩写如下：</span><br><span class="line">hexo n == hexo <span class="keyword">new</span></span><br><span class="line">hexo g == hexo generate</span><br><span class="line">hexo s == hexo server</span><br><span class="line">hexo d == hexo deploy</span><br></pre></td></tr></table></figure><h3 id="3-6-config-yml文件"><a href="#3-6-config-yml文件" class="headerlink" title="3.6 _config.yml文件"></a>3.6 _config.yml文件</h3><p>_config.yml文件是 hexo 的配置文件，里面主要有以下配置：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Hexo Configuration</span></span><br><span class="line"><span class="comment">## Docs: https://hexo.io/docs/configuration.html</span></span><br><span class="line"><span class="comment">## Source: https://github.com/hexojs/hexo/</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Site</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">wyzane's</span> <span class="string">skill</span> <span class="string">blog</span></span><br><span class="line"><span class="attr">subtitle:</span> <span class="string">''</span></span><br><span class="line"><span class="attr">description:</span> <span class="string">''</span></span><br><span class="line"><span class="attr">keywords:</span></span><br><span class="line"><span class="attr">author:</span> <span class="string">wyzane</span></span><br><span class="line"><span class="attr">language:</span> <span class="string">en</span></span><br><span class="line"><span class="attr">timezone:</span> <span class="string">''</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># URL</span></span><br><span class="line"><span class="comment">## If your site is put in a subdirectory, set url as 'http://yoursite.com/child' and root as '/child/'</span></span><br><span class="line"><span class="attr">url:</span> <span class="string">http://wyzane.cc</span></span><br><span class="line"><span class="attr">root:</span> <span class="string">/</span></span><br><span class="line"><span class="attr">permalink:</span> <span class="string">:year/:month/:day/:title/</span></span><br><span class="line"><span class="attr">permalink_defaults:</span></span><br><span class="line"><span class="attr">pretty_urls:</span></span><br><span class="line">  <span class="attr">trailing_index:</span> <span class="literal">true</span> <span class="comment"># Set to false to remove trailing index.html from permalinks</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Directory</span></span><br><span class="line"><span class="attr">source_dir:</span> <span class="string">source</span></span><br><span class="line"><span class="attr">public_dir:</span> <span class="string">public</span></span><br><span class="line"><span class="attr">tag_dir:</span> <span class="string">tags</span></span><br><span class="line"><span class="attr">archive_dir:</span> <span class="string">archives</span></span><br><span class="line"><span class="attr">category_dir:</span> <span class="string">categories</span></span><br><span class="line"><span class="attr">code_dir:</span> <span class="string">downloads/code</span></span><br><span class="line"><span class="attr">i18n_dir:</span> <span class="string">:lang</span></span><br><span class="line"><span class="attr">skip_render:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Writing</span></span><br><span class="line"><span class="attr">new_post_name:</span> <span class="string">:title.md</span> <span class="comment"># File name of new posts</span></span><br><span class="line"><span class="attr">default_layout:</span> <span class="string">post</span></span><br><span class="line"><span class="attr">titlecase:</span> <span class="literal">false</span> <span class="comment"># Transform title into titlecase</span></span><br><span class="line"><span class="attr">external_link:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span> <span class="comment"># Open external links in new tab</span></span><br><span class="line">  <span class="attr">field:</span> <span class="string">site</span> <span class="comment"># Apply to the whole site</span></span><br><span class="line">  <span class="attr">exclude:</span> <span class="string">''</span></span><br><span class="line"><span class="attr">filename_case:</span> <span class="number">0</span></span><br><span class="line"><span class="attr">render_drafts:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">post_asset_folder:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">relative_link:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">future:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">highlight:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">line_number:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">auto_detect:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">tab_replace:</span> <span class="string">''</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Home page setting</span></span><br><span class="line"><span class="comment"># path: Root path for your blogs index page. (default = '')</span></span><br><span class="line"><span class="comment"># per_page: Posts displayed per page. (0 = disable pagination)</span></span><br><span class="line"><span class="comment"># order_by: Posts order. (Order by date descending by default)</span></span><br><span class="line"><span class="attr">index_generator:</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">''</span></span><br><span class="line">  <span class="attr">per_page:</span> <span class="number">10</span></span><br><span class="line">  <span class="attr">order_by:</span> <span class="string">-date</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Category &amp; Tag</span></span><br><span class="line"><span class="attr">default_category:</span> <span class="string">uncategorized</span></span><br><span class="line"><span class="attr">category_map:</span></span><br><span class="line"><span class="attr">tag_map:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Metadata elements</span></span><br><span class="line"><span class="comment">## https://developer.mozilla.org/en-US/docs/Web/HTML/Element/meta</span></span><br><span class="line"><span class="attr">meta_generator:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Date / Time format</span></span><br><span class="line"><span class="comment">## Hexo uses Moment.js to parse and display date</span></span><br><span class="line"><span class="comment">## You can customize the date format as defined in</span></span><br><span class="line"><span class="comment">## http://momentjs.com/docs/#/displaying/format/</span></span><br><span class="line"><span class="attr">date_format:</span> <span class="string">YYYY-MM-DD</span></span><br><span class="line"><span class="attr">time_format:</span> <span class="string">HH:mm:ss</span></span><br><span class="line"><span class="comment">## Use post's date for updated date unless set in front-matter</span></span><br><span class="line"><span class="attr">use_date_for_updated:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Pagination</span></span><br><span class="line"><span class="comment">## Set per_page to 0 to disable pagination</span></span><br><span class="line"><span class="attr">per_page:</span> <span class="number">6</span></span><br><span class="line"><span class="attr">pagination_dir:</span> <span class="string">page</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Include / Exclude file(s)</span></span><br><span class="line"><span class="comment">## include:/exclude: options only apply to the 'source/' folder</span></span><br><span class="line"><span class="attr">include:</span></span><br><span class="line"><span class="attr">exclude:</span></span><br><span class="line"><span class="attr">ignore:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Extensions</span></span><br><span class="line"><span class="comment">## Plugins: https://hexo.io/plugins/</span></span><br><span class="line"><span class="comment">## Themes: https://hexo.io/themes/</span></span><br><span class="line"><span class="attr">theme:</span> <span class="string">clean-blog</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Deployment</span></span><br><span class="line"><span class="comment">## Docs: https://hexo.io/docs/deployment.html</span></span><br><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repository:</span> <span class="string">git@github.com:wyzane/wyzane.github.io.git</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure><p>_config.yml 文件中可以配置标题、主题、分页等参数。</p><p>使用 hexo + github 搭建博客有以下优点：</p><ol><li>简单，成本低，</li><li>支持使用Markdown编写博客，</li><li>扩展对 node.js，hexo，github等知识的应用。</li></ol><p>更多详细信息可以参考这篇文章：<a href="http://blog.haoji.me/build-blog-website-by-hexo-github.html?from=xa" target="_blank" rel="noopener">http://blog.haoji.me/build-blog-website-by-hexo-github.html?from=xa</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>python中描述符的使用</title>
      <link href="/2019/11/28/python%E4%B8%AD%E6%8F%8F%E8%BF%B0%E7%AC%A6%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
      <url>/2019/11/28/python%E4%B8%AD%E6%8F%8F%E8%BF%B0%E7%AC%A6%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="描述符"><a href="#描述符" class="headerlink" title="描述符"></a>描述符</h2><p>描述符的官方文档如下，有问题可以查看官方文档。官方文档：<a href="https://docs.python.org/3.7/howto/descriptor.html?highlight=descriptor" target="_blank" rel="noopener">https://docs.python.org/3.7/howto/descriptor.html?highlight=descriptor</a></p><h3 id="描述符介绍"><a href="#描述符介绍" class="headerlink" title="描述符介绍"></a>描述符介绍</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">描述符（descriptor）实际是一种类，但是这个类实现了__set__ __get__ __delete__ 这<span class="number">3</span>个方法中一个或多个。 其中__get__是必须的，其他<span class="number">2</span>个可选。</span><br><span class="line">如果实现中实现了__set__ __get__那么称之为数据描述符</span><br><span class="line">如果只实现了 __get__ 那么称之为非数据描述符</span><br><span class="line">   </span><br><span class="line">   __get__():调用一个属性时,触发</span><br><span class="line">   __set__():为一个属性赋值时,触发</span><br><span class="line">   __delete__():采用<span class="keyword">del</span>删除属性时,触发</span><br><span class="line">   </span><br><span class="line">   描述符作用：实现对属性的代理；在对属性获取，设置，删除时，可以进行额外的操作</span><br><span class="line"></span><br><span class="line">   数据描述符与非数据描述符的区别：</span><br><span class="line">   访问相同属性时，数据描述符优先于instance dictionary;instance dictionary优先于非数据描述符</span><br><span class="line">   </span><br><span class="line">   当然，我们也可以定义只读的数据描述符：</span><br><span class="line">   在类中同时定义__get__和__set__方法，并且在调用__set__方法时，抛出 AttributeError 异常即可。</span><br><span class="line">   </span><br><span class="line">   属性的调用顺序：</span><br><span class="line">   对象属性的调用顺序：</span><br><span class="line">   在object.__getattribute__()中，会将 obj.x 转换成 type(obj).__dict__[<span class="string">'x'</span>].__get__(obj, type(obj))，再按照 数据描述符 &gt; instance variables &gt; 非数据描述符 &gt;  __getattr__() 的优先级顺序调用</span><br><span class="line">   类属性的调用顺序：</span><br><span class="line">   type.__getattribute__()中 会将 <span class="class"><span class="keyword">class</span>.<span class="title">x</span> 转换成 <span class="title">B</span>.<span class="title">__dict__</span>['<span class="title">x</span>'].<span class="title">__get__</span><span class="params">(None, B)</span>，类似于下面这种调用：</span></span><br><span class="line"><span class="class">       <span class="title">def</span> <span class="title">__getattribute__</span><span class="params">(self, key)</span>:</span></span><br><span class="line">               v = object.__getattribute__(self, key)</span><br><span class="line">               <span class="keyword">if</span> hasattr(v, <span class="string">'__get__'</span>):</span><br><span class="line">                   <span class="keyword">return</span> v.__get__(<span class="literal">None</span>, self)</span><br><span class="line">               <span class="keyword">return</span> v</span><br><span class="line">           </span><br><span class="line">   通过上面的介绍，可以总结出下面的几点：</span><br><span class="line">   <span class="number">1.</span> 描述符会在 __getattribute__() 中被调用</span><br><span class="line">   <span class="number">2.</span> 重写 __getattribute__() 方法会阻止描述符的调用</span><br><span class="line">   <span class="number">3.</span> 数据描述符会重写 instance dictionary</span><br><span class="line">   <span class="number">4.</span> 非数据描述符可能会被 instance dictionary 重写</span><br></pre></td></tr></table></figure><h3 id="描述符应用场景"><a href="#描述符应用场景" class="headerlink" title="描述符应用场景"></a>描述符应用场景</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> 访问属性时进行验证</span><br></pre></td></tr></table></figure><h3 id="property的使用"><a href="#property的使用" class="headerlink" title="property的使用"></a>property的使用</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># property是一个描述符类，用于访问属性</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用方式一：</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, age)</span>:</span></span><br><span class="line">        self._name = name</span><br><span class="line">        self._age = age</span><br><span class="line"></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">name</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"property get"</span>)</span><br><span class="line">        <span class="keyword">return</span> self._name</span><br><span class="line"></span><br><span class="line"><span class="meta">    @name.setter</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">name</span><span class="params">(self, name)</span>:</span></span><br><span class="line">        print(<span class="string">"property setter"</span>)</span><br><span class="line">        self._name = name</span><br><span class="line">        </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    t = Test(<span class="string">"小明"</span>, <span class="number">12</span>)</span><br><span class="line">    print(t.name)</span><br><span class="line">    t.name = <span class="string">"小刘"</span></span><br><span class="line">    print(t.name)</span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">_get_name</span></span><br><span class="line"><span class="string">小明</span></span><br><span class="line"><span class="string">===============</span></span><br><span class="line"><span class="string">_set_name</span></span><br><span class="line"><span class="string">_get_name</span></span><br><span class="line"><span class="string">小刘</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用方式二：</span></span><br><span class="line">调用 property()方法 是创建数据描述符的一种简洁的方法</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, age)</span>:</span></span><br><span class="line">        self._name = name</span><br><span class="line">        self._age = age</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_set_name</span><span class="params">(self, name)</span>:</span></span><br><span class="line">        print(<span class="string">"_set_name"</span>)</span><br><span class="line">        self._name = name</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_get_name</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"_get_name"</span>)</span><br><span class="line">        <span class="keyword">return</span> self._name</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 使用property描述符</span></span><br><span class="line">    name = property(_get_name, _set_name)</span><br><span class="line">    </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    t = Test(<span class="string">"小明"</span>, <span class="number">12</span>)</span><br><span class="line">    print(t.name)</span><br><span class="line"></span><br><span class="line">    print(<span class="string">"==============="</span>)</span><br><span class="line">    t.name = <span class="string">"小刘"</span></span><br><span class="line">    print(t.name)</span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">_get_name</span></span><br><span class="line"><span class="string">小明</span></span><br><span class="line"><span class="string">===============</span></span><br><span class="line"><span class="string">_set_name</span></span><br><span class="line"><span class="string">_get_name</span></span><br><span class="line"><span class="string">小刘</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure><p>对于 property() 如何实现的描述符协议，类似下面这段代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Property</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="string">"Emulate PyProperty_Type() in Objects/descrobject.c"</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, fget=None, fset=None, fdel=None, doc=None)</span>:</span></span><br><span class="line">        self.fget = fget</span><br><span class="line">        self.fset = fset</span><br><span class="line">        self.fdel = fdel</span><br><span class="line">        <span class="keyword">if</span> doc <span class="keyword">is</span> <span class="literal">None</span> <span class="keyword">and</span> fget <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            doc = fget.__doc__</span><br><span class="line">        self.__doc__ = doc</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__get__</span><span class="params">(self, obj, objtype=None)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> obj <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">return</span> self</span><br><span class="line">        <span class="keyword">if</span> self.fget <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">raise</span> AttributeError(<span class="string">"unreadable attribute"</span>)</span><br><span class="line">        <span class="keyword">return</span> self.fget(obj)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__set__</span><span class="params">(self, obj, value)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> self.fset <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">raise</span> AttributeError(<span class="string">"can't set attribute"</span>)</span><br><span class="line">        self.fset(obj, value)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__delete__</span><span class="params">(self, obj)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> self.fdel <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">raise</span> AttributeError(<span class="string">"can't delete attribute"</span>)</span><br><span class="line">        self.fdel(obj)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getter</span><span class="params">(self, fget)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> type(self)(fget, self.fset, self.fdel, self.__doc__)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">setter</span><span class="params">(self, fset)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> type(self)(self.fget, fset, self.fdel, self.__doc__)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">deleter</span><span class="params">(self, fdel)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> type(self)(self.fget, self.fset, fdel, self.__doc__)</span><br></pre></td></tr></table></figure><h3 id="描述符的使用"><a href="#描述符的使用" class="headerlink" title="描述符的使用"></a>描述符的使用</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SimpleDescriptor</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name)</span>:</span></span><br><span class="line">        self.name = name</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__get__</span><span class="params">(self, instance, owner)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        Args:</span></span><br><span class="line"><span class="string">            instance: 类对象的实例</span></span><br><span class="line"><span class="string">            owner: 类对象</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> instance:</span><br><span class="line">            <span class="keyword">return</span> self</span><br><span class="line">        <span class="keyword">return</span> instance.__dict__[self.name]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__set__</span><span class="params">(self, instance, value)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        Args:</span></span><br><span class="line"><span class="string">            instance: 类对象实例</span></span><br><span class="line"><span class="string">            value: 属性值</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        name = self.name</span><br><span class="line">        <span class="keyword">if</span> name == <span class="string">"age"</span> <span class="keyword">and</span> value &lt; <span class="number">18</span>:</span><br><span class="line">            <span class="keyword">raise</span> ValueError(<span class="string">"age less than 18"</span>)</span><br><span class="line">        instance.__dict__[self.name] = value</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__delete__</span><span class="params">(self, instance)</span>:</span></span><br><span class="line">        <span class="keyword">del</span> instance.__dict__[self.name]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span>:</span></span><br><span class="line"></span><br><span class="line">    name = SimpleDescriptor(<span class="string">"name"</span>)</span><br><span class="line">    age = SimpleDescriptor(<span class="string">"age"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, age)</span>:</span></span><br><span class="line">        self._name = name</span><br><span class="line">        self._age = age</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    t = Test(<span class="string">"小明"</span>, <span class="number">12</span>)</span><br><span class="line">    <span class="comment"># print(t.name)</span></span><br><span class="line"></span><br><span class="line">    print(<span class="string">"============="</span>)</span><br><span class="line">    t.name = <span class="string">"小刘"</span></span><br><span class="line">    t.age = <span class="number">16</span></span><br><span class="line">    print(t.name)</span><br><span class="line">    print(t.age)</span><br></pre></td></tr></table></figure><h3 id="描述符的应用"><a href="#描述符的应用" class="headerlink" title="描述符的应用"></a>描述符的应用</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1. 应用在 staticmethod 中 ，staticmethod是一个非数据描述符。下面两段代码片段功能相同</span></span><br><span class="line"><span class="comment"># 代码1：</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">E</span>:</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">f</span><span class="params">(x)</span>:</span></span><br><span class="line">        print(x)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    E.f(<span class="number">1</span>)</span><br><span class="line">    E().f(<span class="number">2</span>)</span><br><span class="line">    </span><br><span class="line">  </span><br><span class="line"><span class="comment"># 代码2：</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">E</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">f</span><span class="params">(x)</span>:</span></span><br><span class="line">        print(x)</span><br><span class="line"></span><br><span class="line">    f = staticmethod(f)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    E.f(<span class="number">1</span>)</span><br><span class="line">    E().f(<span class="number">2</span>)</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="comment"># 同样的， classmethod 也是一个非数据描述符，下面两段代码功能相同</span></span><br><span class="line"><span class="comment"># 代码1：</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">E</span>:</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">f</span><span class="params">(cls, x)</span>:</span></span><br><span class="line">        print(x)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    E.f(<span class="number">1</span>)</span><br><span class="line">    E().f(<span class="number">2</span>)</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="comment"># 代码2：</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">E</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">f</span><span class="params">(cls, x)</span>:</span></span><br><span class="line">        print(x)</span><br><span class="line"></span><br><span class="line">    f = classmethod(f)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    E.f(<span class="number">1</span>)</span><br><span class="line">    E().f(<span class="number">2</span>)</span><br></pre></td></tr></table></figure><p>以上就是python中描述符的介绍！</p>]]></content>
      
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
